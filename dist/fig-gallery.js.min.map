{"version":3,"sources":["fig-gallery/src/fig-gallery.js"],"names":["FigureGallery","_this","this","_ref","arguments","length","undefined","_ref$container","container","_ref$gallerySelector","gallerySelector","_ref$openSelector","openSelector","_ref$currentSelector","currentSelector","_ref$buttonContainerS","buttonContainerSelector","_ref$buttonSelectors","buttonSelectors","_ref$buttonContents","buttonContents","_ref$buttonsOrder","buttonsOrder","_ref$cycle","cycle","_ref$overlaySelectors","overlaySelectors","_ref$swipe","swipe","_ref$openable","openable","_ref$throwsOpenIndexE","throwsOpenIndexError","_ref$resizePolicy","resizePolicy","RESIZE_POLICY","CONTENT","_ref$buttonPlacementP","buttonPlacementPolicy","BUTTON_PLACEMENT_POLICY","ALL","_ref$buttonContainerP","buttonContainerPlacementPolicy","BUTTON_CONTAINER_PLACEMENT_POLICY","OUTSIDE_CONTENT","document","querySelector","HTMLElement","Error","indexOf","that","Object","assign","close","prev","next","overlay","content","galleryClass","substr","openClass","currentClass","buttonClasses","overlayClasses","classList","contains","add","figures","querySelectorAll","dialogCache","createOverlay","current","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","figure","value","err","return","swipeHandler","SwipeEvent","element","itemSelector","activeSelector","eventCallbacks","containerClick","isOpen","open","figureClick","e","stopImmediatePropagation","target","tagName","parentNode","set","dialogClick","keyboardNavigation","which","keyCode","swipeNavigation","direction","detail","resize","setContentSize","buttons","createButtonsCallbacks","keepInBound","index","getContent","setImageSize","image","overlayContentStyle","currentStyle","window","getComputedStyle","ratio","Math","min","clientWidth","parseFloat","marginLeft","marginRight","naturalWidth","clientHeight","marginTop","marginBottom","naturalHeight","toUpperCase","style","width","height","CONTAINER","setVideoSize","video","videoWidth","videoHeight","setEmbedSize","embed","hasAttribute","parseInt","getAttribute","setAttribute","appendChild","dialog","createElement","buttonContainer","tmp","selector","charAt","id","INSIDE_CONTENT","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","type","button","innerHTML","NAVIGATORS_ONLY","CLOSE_ONLY","getFigureIndex","Array","prototype","call","setCurrentFigure","remove","updateOverlayFigure","figureClone","cloneNode","HTMLDialogElement","showModal","currFigure","replaceChild","firstChild","insertBefore","navigateOverlayFigure","dir","cycleState","callbacks","_arr","keys","_loop","_i","setListeners","setListenersFn","forceFigures","addEventListener","mutation","forEach","attach","_arr2","_i2","removeEventListener","detach","_arr3","_i3","_type","m","MutationObserver","mutations","mut","addedNodes","removedNodes","values","observe","childList","abs","concat","openedEvent","CustomEvent","createEvent","initCustomEvent","active","getActiveFigure","dispatchEvent","oldCurrent","prevEvent","nextEvent","settedEvent","old","closedEvent","setOpenable","val","disconnect","removeChild","openablechangeEvent","updateFigures","events","isOpenable","getContainer","getCurrentFigure","getActiveContent","getSwipeHandler","freeze"],"mappings":"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","file":"fig-gallery.js","sourcesContent":["\"use strict\";\n\n/**\r\n * Gallery that permits to see images or videos at the maximum of their sizes\r\n * or, at least the maximum that fits in the window respecting ratio.\r\n * Removes the controls and caches the overlay.\r\n *\r\n * @constructor\r\n *\r\n * @param {object} param\r\n * @param {string|HTMLElement} [param.container='#gallery'] Container of the gallery.\r\n * @param {string} [param.gallerySelector='.gallery'] Gallery selector.\r\n * @param {string} [param.openSelector='.open'] Selector for the open gallery.\r\n * @param {string} [param.currentSelector='.current'] Selector of the current element.\r\n * @param {string|null} [param.buttonContainerSelector=null] Selector of the container of the buttons. Must be a static element in the overlay or the overaly itself (rapresented by the value `null`).\r\n * @param {object} [param.buttonSelectors={}] Selectors for the overlay buttons.\r\n * @param {string} [param.buttonSelectors.close='.close'] Selector for the 'close' button.\r\n * @param {string} [param.buttonSelectors.prev='.prev'] Selector for the 'previous' button.\r\n * @param {string} [param.buttonSelectors.next='.next'] Selector for the 'next' button.\r\n * @param {object} [param.buttonContents={}] Contents for the overlay buttons.\r\n * @param {string} [param.buttonContents.close='&times;'] Content for the 'close' button.\r\n * @param {string} [param.buttonContents.prev='&lang;'] Content for the 'previous' button.\r\n * @param {string} [param.buttonContents.next='&rang;'] Content for the 'next' button.\r\n * @param {array} [param.buttonsOrder=['prev', 'next', 'close']] Orders of the buttons.\r\n * @param {object} [param.overlaySelectors={}] Selectors for the overlay elements.\r\n * @param {string} [param.overlaySelectors.overlay='.overlay'] Selector for the overlay element.\r\n * @param {string} [param.overlaySelectors.content='.overlay-content'] Selector content of the overlay element.\r\n * @param {boolean} [param.cycle=true] Determines if the gallery can cycle when reaches the end-points.\r\n * @param {boolean} [param.swipe=false] Determines if the gallery can be navigated with swipes.\r\n * @param {boolean} [param.openable=true] Determines if the gallery can be opened or not. If openable, shows the overlay.\r\n * @param {boolean} [param.throwsOpenIndexError=false] Determines if the gallery has to throw an error when the users tries to navigate beyond the elements.\r\n * @param {string} [resizePolicy='CONTENT'] Determines which element must be resized. Can be `'CONTAINER'` or `'CONTENT'`.\r\n * @param {string} [buttonPlacementPolicy='ALL'] If `buttonContainerSelector` isn't `null`, permits to choose which button should be moved inside of it. Can be `'ALL'`, `'NAVIGATORS_ONLY'` or `'CLOSE_ONLY'`.\r\n * @param {string} [buttonContainerPlacementPolicy='OUTSIDE_CONTENT'] If `buttonContainerSelector` isn't `null`, permits to choose where button container must be placed. Can be `'OUTSIDE_CONTENT'` or `'INSIDE_CONTENT'`.\r\n *\r\n * @throws Will throw an error if the container argument isn't an HTMLElement.\r\n * @throws Will throw an error if the `buttonContainerPlacementPolicy` is invalid.\r\n * @throws Will throw an error if the `buttonPlacementPolicy` is invalid.\r\n * @throws Will throw an error if the `resizePolicy` is invalid.\r\n * @throws Will throw an error if the `buttonsOrder` doesn't include all the buttons.\r\n *\r\n * @version 1.7.4\r\n *\r\n * @author Gennaro Landolfi <gennarolandolfi@codedwork.it>\r\n */\nfunction FigureGallery() {\n  var _this = this;\n\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$container = _ref.container,\n      container = _ref$container === void 0 ? '#gallery' : _ref$container,\n      _ref$gallerySelector = _ref.gallerySelector,\n      gallerySelector = _ref$gallerySelector === void 0 ? '.gallery' : _ref$gallerySelector,\n      _ref$openSelector = _ref.openSelector,\n      openSelector = _ref$openSelector === void 0 ? '.open' : _ref$openSelector,\n      _ref$currentSelector = _ref.currentSelector,\n      currentSelector = _ref$currentSelector === void 0 ? '.current' : _ref$currentSelector,\n      _ref$buttonContainerS = _ref.buttonContainerSelector,\n      buttonContainerSelector = _ref$buttonContainerS === void 0 ? null : _ref$buttonContainerS,\n      _ref$buttonSelectors = _ref.buttonSelectors,\n      buttonSelectors = _ref$buttonSelectors === void 0 ? {} : _ref$buttonSelectors,\n      _ref$buttonContents = _ref.buttonContents,\n      buttonContents = _ref$buttonContents === void 0 ? {} : _ref$buttonContents,\n      _ref$buttonsOrder = _ref.buttonsOrder,\n      buttonsOrder = _ref$buttonsOrder === void 0 ? ['prev', 'next', 'close'] : _ref$buttonsOrder,\n      _ref$cycle = _ref.cycle,\n      cycle = _ref$cycle === void 0 ? true : _ref$cycle,\n      _ref$overlaySelectors = _ref.overlaySelectors,\n      overlaySelectors = _ref$overlaySelectors === void 0 ? {} : _ref$overlaySelectors,\n      _ref$swipe = _ref.swipe,\n      swipe = _ref$swipe === void 0 ? false : _ref$swipe,\n      _ref$openable = _ref.openable,\n      openable = _ref$openable === void 0 ? true : _ref$openable,\n      _ref$throwsOpenIndexE = _ref.throwsOpenIndexError,\n      throwsOpenIndexError = _ref$throwsOpenIndexE === void 0 ? false : _ref$throwsOpenIndexE,\n      _ref$resizePolicy = _ref.resizePolicy,\n      resizePolicy = _ref$resizePolicy === void 0 ? RESIZE_POLICY.CONTENT : _ref$resizePolicy,\n      _ref$buttonPlacementP = _ref.buttonPlacementPolicy,\n      buttonPlacementPolicy = _ref$buttonPlacementP === void 0 ? BUTTON_PLACEMENT_POLICY.ALL : _ref$buttonPlacementP,\n      _ref$buttonContainerP = _ref.buttonContainerPlacementPolicy,\n      buttonContainerPlacementPolicy = _ref$buttonContainerP === void 0 ? BUTTON_CONTAINER_PLACEMENT_POLICY.OUTSIDE_CONTENT : _ref$buttonContainerP;\n\n  // Type-checks\n  if (typeof container === 'string') {\n    container = document.querySelector(container);\n  }\n\n  if (!(container instanceof HTMLElement)) {\n    throw new Error('The gallery container must be a valid DOM element.');\n  }\n\n  if (buttonContainerSelector != null) {\n    if (!BUTTON_PLACEMENT_POLICY[buttonPlacementPolicy]) {\n      throw new Error('The specified button placement policy is not defined.');\n    }\n\n    if (!BUTTON_CONTAINER_PLACEMENT_POLICY[buttonContainerPlacementPolicy]) {\n      throw new Error('The specified button container placement policy is not defined.');\n    }\n  }\n\n  if (!RESIZE_POLICY[resizePolicy]) {\n    throw new Error('The specified resize policy is not defined.');\n  }\n\n  if (buttonsOrder.length !== 3 || buttonsOrder.indexOf('prev') === -1 && buttonsOrder.indexOf('prev') === -1 && buttonsOrder.indexOf('close') === -1) {\n    throw new Error(\"The given order doesn't include all the buttons.\");\n  } // Shorthand to easily reach `this`.\n\n\n  var that = this; // Overlaps custom settings to default ones:\n\n  buttonSelectors = Object.assign({\n    close: '.close',\n    prev: '.prev',\n    next: '.next'\n  }, buttonSelectors);\n  buttonContents = Object.assign({\n    close: '&times;',\n    prev: '&lang;',\n    next: '&rang;'\n  }, buttonContents);\n  overlaySelectors = Object.assign({\n    overlay: '.overlay',\n    content: '.overlay-content'\n  }, overlaySelectors); // Class mapping:\n\n  /**\r\n   * CSS class of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var galleryClass = gallerySelector.substr(1);\n  /**\r\n   * CSS class for the open state of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var openClass = openSelector.substr(1);\n  /**\r\n   * CSS class for the current figure. Applies to the original selected <figure>\r\n   * and the chosen one. Can be applied only to one element at the time.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var currentClass = currentSelector.substr(1);\n  /**\r\n   * Object containing the CSS classes that get applied to the buttons of the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var buttonClasses = {\n    close: buttonSelectors.close.substr(1),\n    prev: buttonSelectors.prev.substr(1),\n    next: buttonSelectors.next.substr(1)\n  };\n  /**\r\n   * Object containing the CSS classes that get applied to the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var overlayClasses = {\n    overlay: overlaySelectors.overlay.substr(1),\n    content: overlaySelectors.content.substr(1)\n  }; // Sets the gallery class.\n\n  if (!container.classList.contains(galleryClass)) {\n    container.classList.add(galleryClass);\n  }\n  /**\r\n   * Gets all the <figure> elements children of container.\r\n   *\r\n   * @type {NodeList}\r\n   *\r\n   * @private\r\n   */\n\n\n  var figures = container.querySelectorAll('figure');\n  /**\r\n   * Caches the overlay when removed.\r\n   *\r\n   * @type {HTMLDialogElement|HTMLDivElement|null}\r\n   *\r\n   * @private\r\n   */\n\n  var dialogCache = null;\n  /**\r\n   * Represents the overlay element.\r\n   *\r\n   * @type {HTMLDialogElement|HTMLDivElement}\r\n   *\r\n   * @property {object} buttons - Contains the buttons contained in the overlay.\r\n   * @property {HTMLElement} content - Contains the content container.\r\n   * @method content.getContent() - Gets the content of overlay.content.\r\n   *\r\n   * @private\r\n   *\r\n   * @see createOverlay\r\n   */\n\n  var overlay = createOverlay();\n  /**\r\n   * Represents the current element in container.\r\n   *\r\n   * @type {HTMLElement}\r\n   *\r\n   * @private\r\n   */\n\n  var current = function () {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = figures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var figure = _step.value;\n\n        if (figure.classList.contains(currentClass)) {\n          return figure;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return figures[0] || null;\n  }();\n  /**\r\n   * Contains the swipe handler if SwipeEvent is present.\r\n   *\r\n   * @type {SwipeEvent|null}\r\n   *\r\n   * @private\r\n   *\r\n   * @see {@link https://github.com/dencreativityspace/swipe-event|swipe-event}\r\n   */\n\n\n  var swipeHandler = function () {\n    if (swipe && typeof SwipeEvent === 'function') {\n      return new SwipeEvent({\n        element: container,\n        itemSelector: 'figure',\n        activeSelector: currentSelector\n      });\n    }\n\n    return null;\n  }();\n  /**\r\n   * Stores the callbacks for the events.\r\n   *\r\n   * @type {object}\r\n   *\r\n   * @private\r\n   */\n\n\n  var eventCallbacks = {\n    containerClick: function containerClick() {\n      if (!that.isOpen()) {\n        that.open(null);\n      }\n    },\n    figureClick: function figureClick(e) {\n      e.stopImmediatePropagation();\n      var figure = e.target;\n\n      while (figure.tagName !== 'FIGURE') {\n        figure = figure.parentNode;\n      }\n\n      that.set(figure).open(null);\n    },\n    dialogClick: function dialogClick(e) {\n      e.stopImmediatePropagation();\n\n      if (e.target.classList.contains(overlayClasses.overlay) && that.isOpen()) {\n        that.close();\n      }\n    },\n    keyboardNavigation: function keyboardNavigation(e) {\n      if (that.isOpen()) {\n        var key = e.which || e.keyCode || 0;\n\n        switch (key) {\n          case 27:\n            // Esc\n            that.close();\n            break;\n\n          case 37:\n            // Left arrow\n            that.prev();\n            break;\n\n          case 39:\n            // Right arrow\n            that.next();\n            break;\n\n          case 36:\n            // Home\n            that.open(0);\n            break;\n\n          case 35:\n            // End\n            that.open(-1);\n            break;\n        }\n      }\n    },\n    swipeNavigation: function swipeNavigation(e) {\n      var direction = e.detail.direction || e.direction || null;\n\n      if (direction === 'left') {\n        that.prev();\n      } else if (direction === 'right') {\n        that.next();\n      }\n    },\n    resize: function resize() {\n      setContentSize();\n    },\n    buttons: createButtonsCallbacks()\n  }; // Private methods\n\n  /**\r\n   * Keeps `<figure>`s index in bound.\r\n   *\r\n   * @param {number} index Index to check if in bound.\r\n   * @param {boolean} [cycleState=cycle] Determines if function have to keep\r\n   * in bound considering the possibility to cycle through the elements.\r\n   *\r\n   * @return {number}\r\n   * @private\r\n   */\n\n  function keepInBound(index) {\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    return (cycleState && index < 0 ? figures.length + index + figures.length : index) % figures.length;\n  }\n  /**\r\n   * Sets the maximum image size possible.\r\n   *\r\n   * @param {HTMLImageElement} image Image element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setImageSize(image) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / image.naturalWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / image.naturalHeight);\n\n      if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTENT) {\n        image.style.width = image.naturalWidth * ratio + 'px';\n        image.style.height = image.naturalHeight * ratio + 'px';\n      } else if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTAINER) {\n        overlay.content.style.width = image.naturalWidth * ratio + 'px';\n        overlay.content.style.height = image.naturalHeight * ratio + 'px';\n      }\n    }\n  }\n  /**\r\n   * Sets the maximum video size possible.\r\n   *\r\n   * @param {HTMLVideoElement} video Video element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setVideoSize(video) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / video.videoWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / video.videoHeight);\n\n      if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTENT) {\n        video.style.width = video.videoWidth * ratio + 'px';\n        video.style.height = video.videoHeight * ratio + 'px';\n      } else if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTAINER) {\n        overlay.content.style.width = video.videoWidth * ratio + 'px';\n        overlay.content.style.height = video.videoHeight * ratio + 'px';\n      }\n    }\n  }\n  /**\r\n   * Sets the maximum embed, object or iframe size possible.\r\n   *\r\n   * @param {HTMLEmbedElement|HTMLObjectElement|HTMLIFrameElement} embed Embed, object or iframe element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setEmbedSize(embed) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n\n      if (!embed.hasAttribute('data-width') || !embed.hasAttribute('data-height') || embed.width > parseInt(embed.getAttribute('data-width')) || embed.height > parseInt(embed.getAttribute('data-height'))) {\n        embed.setAttribute('data-width', embed.width);\n        embed.setAttribute('data-height', embed.height);\n      }\n\n      embed.width = parseInt(embed.getAttribute('data-width'));\n      embed.height = parseInt(embed.getAttribute('data-height'));\n      var ratio = Math.min((overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / embed.width, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / embed.height);\n\n      if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTAINER) {\n        overlay.content.style.width = embed.width * ratio + 'px';\n        overlay.content.style.height = embed.height * ratio + 'px';\n      }\n\n      embed.width = parseInt(embed.width * ratio);\n      embed.height = parseInt(embed.height * ratio);\n    }\n  }\n  /**\r\n   * Sets the maximum size possible for the current content of the overlay.\r\n   * Routes by the type of the element.\r\n   *\r\n   * @see setImageSize\r\n   * @see setVideoSize\r\n   * @see setEmbedSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function setContentSize() {\n    if (overlay) {\n      var content = overlay.getContent();\n\n      if (content) {\n        switch (content.tagName) {\n          case 'IMG':\n            setImageSize(content);\n            break;\n\n          case 'VIDEO':\n            setVideoSize(content);\n            break;\n\n          case 'EMBED':\n          case 'IFRAME':\n          case 'OBJECT':\n            setEmbedSize(content);\n        }\n      }\n    }\n  }\n  /**\r\n   * Creates the overlay object or retrieves it from cache.\r\n   * May return null if `openable` is `false`.\r\n   *\r\n   * @return {HTMLDialogElement|HTMLDivElement|null}\r\n   *\r\n   * @see dialogCache\r\n   * @see overlay\r\n   *\r\n   * @private\r\n   *\r\n   * @throws Throws an error when the `buttonContainerSelector` is too complex.\r\n   */\n\n\n  function createOverlay() {\n    if (openable) {\n      if (dialogCache) {\n        container.appendChild(dialogCache);\n        return dialogCache;\n      } // Takes interval if already exists\n\n\n      var dialog = container.querySelector(overlaySelectors.overlay);\n\n      if (!dialog) {\n        // Initalizes overlay\n        dialog = document.createElement('HTMLDialogElement' in window ? 'dialog' : 'div');\n        dialog.classList.add(overlayClasses.overlay);\n        dialog.content = document.createElement('div');\n        dialog.content.classList.add(overlayClasses.content);\n        dialog.appendChild(dialog.content);\n      } // Takes buttons or creates them.\n\n\n      dialog.buttons = {};\n\n      var buttonContainer = function () {\n        if (buttonContainerSelector == null) {\n          return null;\n        }\n\n        var tmp = dialog.querySelector(buttonContainerSelector);\n\n        if (!tmp) {\n          var selector = buttonContainerSelector.substr(1);\n          tmp = document.createElement('div');\n\n          if (buttonContainerSelector.charAt(0) === '#') {\n            tmp.id = selector;\n          } else if (buttonContainerSelector.charAt(0) === '.') {\n            tmp.classList.add(selector);\n          } else {\n            throw new Error('buttonContainerSelector must be a class or an ID. Complex selector given.');\n          }\n\n          if (buttonContainerPlacementPolicy.toUpperCase() === BUTTON_CONTAINER_PLACEMENT_POLICY.OUTSIDE_CONTENT) {\n            dialog.appendChild(tmp);\n          } else if (buttonContainerPlacementPolicy.toUpperCase() === BUTTON_CONTAINER_PLACEMENT_POLICY.INSIDE_CONTENT) {\n            dialog.content.appendChild(tmp);\n          }\n        }\n\n        return tmp;\n      }();\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = buttonsOrder[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var type = _step2.value;\n          var button = dialog.querySelector(buttonSelectors[type]);\n\n          if (!button) {\n            button = document.createElement('button');\n            button.classList.add(buttonClasses[type]);\n            button.innerHTML = buttonContents[type];\n\n            if (buttonContainer === null) {\n              dialog.appendChild(button);\n            } else {\n              if (buttonPlacementPolicy.toUpperCase() === BUTTON_PLACEMENT_POLICY.ALL) {\n                buttonContainer.appendChild(button);\n              } else {\n                if (buttonPlacementPolicy.toUpperCase() === BUTTON_PLACEMENT_POLICY.NAVIGATORS_ONLY) {\n                  if (type !== 'close') {\n                    buttonContainer.appendChild(button);\n                  } else {\n                    dialog.appendChild(button);\n                  }\n                } else if (buttonPlacementPolicy.toUpperCase() === BUTTON_PLACEMENT_POLICY.CLOSE_ONLY) {\n                  if (type === 'close') {\n                    buttonContainer.appendChild(button);\n                  } else {\n                    dialog.appendChild(button);\n                  }\n                }\n              }\n            }\n          }\n\n          dialog.buttons[type] = button;\n        } // Utility to get the content of the current figure.\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      dialog.getContent = function () {\n        return dialog.content.querySelector('img, video, object, embed, iframe');\n      };\n\n      dialogCache = dialog;\n      container.appendChild(dialogCache);\n      return dialogCache;\n    }\n\n    return null;\n  }\n  /**\r\n   * Gets the index of the given figure.\r\n   *\r\n   * @param {HTMLElement} figure\r\n   *\r\n   * @return {number}\r\n   *\r\n   * @private\r\n   */\n\n\n  function getFigureIndex(figure) {\n    return Array.prototype.indexOf.call(figures, figure);\n  }\n  /**\r\n   * Sets the given figure as current.\r\n   *\r\n   * @param {HTMLElement|Node} figure\r\n   *\r\n   * @private\r\n   */\n\n\n  function setCurrentFigure(figure) {\n    if (current != null) {\n      current.classList.remove(currentClass);\n    }\n\n    figure.classList.add(currentClass);\n    current = figure;\n  }\n  /**\r\n   * Updates the content of the overlay by cloning the current figure and\r\n   * opens the overlay.\r\n   *\r\n   * @see setContentSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function updateOverlayFigure() {\n    var figureClone = current.cloneNode(true);\n    container.classList.add(openClass);\n\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (!overlay.open) {\n          overlay.showModal();\n        }\n      } else {\n        overlay.classList.add(openClass);\n      }\n\n      var currFigure = overlay.content.querySelector('figure');\n\n      if (currFigure) {\n        overlay.content.replaceChild(figureClone, currFigure);\n      } else {\n        if (overlay.content.firstChild) {\n          overlay.content.insertBefore(figureClone, overlay.content.firstChild);\n        } else {\n          overlay.content.appendChild(figureClone);\n        }\n      }\n\n      setContentSize();\n    }\n  }\n  /**\r\n   * Lets the user navigate through the gallery.\r\n   *\r\n   * @param {number} [dir=1] Number of elements next or before the current.\r\n   * @param {boolean} [cycleState=cycle] Determines if the counter must cycle.\r\n   *\r\n   * @see setCurrentFigure\r\n   * @see updateOverlayFigure\r\n   * @see getFigureIndex\r\n   * @see KeepInBound\r\n   *\r\n   * @private\r\n   */\n\n\n  function navigateOverlayFigure() {\n    var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    setCurrentFigure(figures[keepInBound(getFigureIndex(current) + dir, cycleState)]);\n\n    if (that.isOpen()) {\n      updateOverlayFigure();\n    }\n  }\n  /**\r\n   * Creates the object that will containt the button callbacks.\r\n   * Returns `null` if `overlay` doesn't exists.\r\n   * Useful for caching.\r\n   *\r\n   * @return {object|null}\r\n   *\r\n   * @see overlay\r\n   *\r\n   * @private\r\n   */\n\n\n  function createButtonsCallbacks() {\n    if (overlay) {\n      var callbacks = {};\n\n      var _arr = Object.keys(overlay.buttons);\n\n      var _loop = function _loop() {\n        var type = _arr[_i];\n\n        callbacks[type] = function (e) {\n          e.stopImmediatePropagation();\n          that[type]();\n        };\n      };\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        _loop();\n      }\n\n      return callbacks;\n    }\n\n    return null;\n  } // Event Listeners\n\n  /**\r\n   * Adds or removes all the event listeners to container.\r\n   * Uses `createButtonsCallbacks()` to create the button callbacks and\r\n   * appends them to `eventCallbacks`.\r\n   *\r\n   * @function\r\n   *\r\n   * @param {boolean} [forceFigures=false] Determines if the update must be forced.\r\n   * Useful when MutationObserver isn't supported.\r\n   *\r\n   * @see createButtonsCallbacks\r\n   * @see eventCallbacks\r\n   *\r\n   * @private\r\n   */\n\n\n  var setListeners = function setListenersFn() {\n    var forceFigures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (openable) {\n      // Click on the gallery\n      container.addEventListener('click', eventCallbacks.containerClick, false);\n\n      if (forceFigures || !mutation) {\n        figures.forEach(function (figure) {\n          figure.addEventListener('click', eventCallbacks.figureClick, false);\n        });\n      }\n\n      if (overlay) {\n        overlay.addEventListener('click', eventCallbacks.dialogClick, false);\n      } // Keyboard navigation\n\n\n      document.addEventListener('keydown', eventCallbacks.keyboardNavigation); // Swipe navigation - since 1.1.0\n\n      if (swipeHandler) {\n        swipeHandler.attach();\n        /**\r\n         * @listens SwipeEvent#swipe\r\n         * @see {@link https://github.com/dencreativityspace/swipe-event|SwipeEvent}\r\n         */\n\n        document.addEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.addEventListener('resize', eventCallbacks.resize); // Binds the overlay buttons to the public methods\n\n      if (overlay) {\n        if (!eventCallbacks.buttons) {\n          eventCallbacks.buttons = createButtonsCallbacks();\n        }\n\n        var _arr2 = Object.keys(overlay.buttons);\n\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n          var type = _arr2[_i2];\n          overlay.buttons[type].addEventListener('click', eventCallbacks.buttons[type], false);\n        }\n      }\n    } else {\n      container.removeEventListener('click', eventCallbacks.containerClick, false);\n\n      if (overlay) {\n        overlay.removeEventListener('click', eventCallbacks.dialogClick, false);\n      }\n\n      figures.forEach(function (figure) {\n        figure.removeEventListener('click', eventCallbacks.figureClick, false);\n      });\n      document.removeEventListener('keydown', eventCallbacks.keyboardNavigation);\n\n      if (swipeHandler) {\n        swipeHandler.detach();\n        document.removeEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.removeEventListener('resize', eventCallbacks.resize);\n\n      if (overlay) {\n        var _arr3 = Object.keys(overlay.buttons);\n\n        for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n          var _type = _arr3[_i3];\n\n          overlay.buttons[_type].removeEventListener('click', eventCallbacks.buttons[_type], false);\n        }\n      }\n    }\n\n    return setListenersFn;\n  }(true);\n  /**\r\n   * Will contain MutationObserver instance if supported.\r\n   *\r\n   * @constant\r\n   * @type {MutationObserver|null}\r\n   *\r\n   * @private\r\n   */\n\n\n  var mutation = function () {\n    if ('MutationObserver' in window) {\n      var m = new MutationObserver(function (mutations) {\n        mutations.forEach(function (mut) {\n          if (mut.type === 'childList') {\n            figures = container.querySelectorAll('figure');\n\n            if (mut.addedNodes && mut.addedNodes.length > 0) {\n              mut.addedNodes.forEach(function (figure) {\n                if (figure.tagName === 'FIGURE') {\n                  figure.addEventListener('click', eventCallbacks.figureClick, false);\n                }\n              });\n            }\n\n            if (mut.removedNodes && current in mut.removedNodes.values()) {\n              current = figures[0] || null;\n            }\n          }\n        });\n      });\n      m.observe(container, {\n        childList: true\n      });\n      return m;\n    }\n\n    return null;\n  }(); // Public methods\n\n  /**\r\n   * Opens the overlay to show the `<figure>` with the given index or the current one.\r\n   *\r\n   * @param   {?number}   [index=0]   Index of the element to be shown.\r\n   *                                  If is null gets the current figure.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:opened\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to `true`\r\n   * and the given index is out of bound.\r\n   */\n\n\n  this.open = function () {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (index == null) {\n      index = getFigureIndex(current);\n    } else {\n      index = parseInt(index);\n\n      if (throwsOpenIndexError) {\n        if (index > figures.length - 1 || Math.abs(index) > figures.length - 1) {\n          throw new Error(\"The element #\".concat(index, \" cannot be found.\"));\n        }\n      } else {\n        index = keepInBound(index);\n      }\n    }\n\n    if (!that.isOpen() || figures[index] !== current) {\n      if (figures.length > 0 || index <= figures.length || current == null) {\n        setCurrentFigure(figures[0]);\n      }\n\n      if (current != null) {\n        updateOverlayFigure();\n      }\n    }\n\n    var openedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      openedEvent = document.createEvent('fig-gallery:opened');\n      openedEvent.initCustomEvent('fig-gallery:opened', false, false, {\n        current: current,\n        active: that.getActiveFigure()\n      });\n    } else {\n      openedEvent = new CustomEvent('fig-gallery:opened', {\n        detail: {\n          current: current,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets opened.\r\n     *\r\n     * @event FigureGallery#fig-gallery:opened\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(openedEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the previous `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:prev\r\n   *\r\n   * @return  {this}\r\n   */\n\n\n  this.prev = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(-1, cycleState);\n    var prevEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      prevEvent = document.createEvent('fig-gallery:prev');\n      prevEvent.initCustomEvent('fig-gallery:prev', false, false, {\n        current: current,\n        next: oldCurrent,\n        active: that.getActiveFigure()\n      });\n    } else {\n      prevEvent = new CustomEvent('fig-gallery:prev', {\n        detail: {\n          current: current,\n          next: oldCurrent,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets navigated to the previous element.\r\n     *\r\n     * @event FigureGallery#fig-gallery:prev\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} next - Old active <figure> element in container which succeeds the current.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(prevEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the next `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:next\r\n   *\r\n   * @return  {this}\r\n   */\n\n\n  this.next = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(1, cycleState);\n    var nextEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      nextEvent = document.createEvent('fig-gallery:next');\n      nextEvent.initCustomEvent('fig-gallery:next', false, false, {\n        current: current,\n        prev: oldCurrent,\n        active: that.getActiveFigure()\n      });\n    } else {\n      nextEvent = new CustomEvent('fig-gallery:next', {\n        detail: {\n          current: current,\n          prev: oldCurrent,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets navigated to the next element.\r\n     *\r\n     * @event FigureGallery#fig-gallery:next\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} prev - Old active <figure> element in container which precedes the current.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(nextEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the current `<figure>`.\r\n   *\r\n   * @param   {number|HTMLElement|Node}   figure   Index of the element or the\r\n   *                                          element itself to bet setted as\r\n   *                                          current.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:setted\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null.\r\n   * @throws Will throw an error if the argument isn't a child of the container.\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to true and if the user tries to go beyond the end-points.\r\n   * @throws Will throw an error if the argument isn't a valid element.\r\n   */\n\n\n  this.set = function (figure) {\n    if (figure == null) {\n      throw new Error('The given element is not a valid value. Please, insert an integer or a DOM element.');\n    }\n\n    if (typeof figure === 'number') {\n      if (throwsOpenIndexError) {\n        if (figure > figures.length - 1 || Math.abs(figure) > figures.length - 1) {\n          throw new Error(\"The element #\".concat(figure, \" cannot be found.\"));\n        }\n      } else {\n        figure = keepInBound(figure);\n      }\n\n      figure = figures[figure];\n    } else if (figure instanceof HTMLElement) {\n      if (getFigureIndex(figure) < 0) {\n        throw new Error('The given element is not in this gallery.');\n      }\n    } else {\n      throw new Error('The given element is not a valid value. Please, insert an integer or a DOM element.');\n    }\n\n    var oldCurrent = current;\n    setCurrentFigure(figure);\n    updateOverlayFigure();\n    var settedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      settedEvent = document.createEvent('fig-gallery:setted');\n      settedEvent.initCustomEvent('fig-gallery:setted', false, false, {\n        current: current,\n        old: oldCurrent,\n        active: that.getActiveFigure()\n      });\n    } else {\n      settedEvent = new CustomEvent('fig-gallery:setted', {\n        detail: {\n          current: current,\n          old: oldCurrent,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets setted on a specific element.\r\n     *\r\n     * @event FigureGallery#fig-gallery:setted\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} old - Old active <figure> element in container.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(settedEvent);\n    return _this;\n  };\n  /**\r\n   * Closes the overlay.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:closed\r\n   *\r\n   * @return  {this}\r\n   */\n\n\n  this.close = function () {\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (overlay.open) {\n          overlay.close();\n        }\n      } else {\n        overlay.classList.remove(openClass);\n      }\n    }\n\n    container.classList.remove(openClass);\n    var closedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      closedEvent = document.createEvent('fig-gallery:closed');\n      closedEvent.initCustomEvent('fig-gallery:closed', false, false, {\n        current: current\n      });\n    } else {\n      closedEvent = new CustomEvent('fig-gallery:closed', {\n        detail: {\n          current: current\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets closed.\r\n     *\r\n     * @event FigureGallery#fig-gallery:closed\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     */\n\n\n    container.dispatchEvent(closedEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the gallery to be openable or not.\r\n   *\r\n   * @param   {boolean}   val\r\n   *\r\n   * @emits FigureGallery#fig-gallery:openablechange\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null or isn't a boolean.\r\n   */\n\n\n  this.setOpenable = function (val) {\n    if (!val || typeof val !== 'boolean') {\n      throw new Error('The value must be a boolean.');\n    }\n\n    if (val !== openable) {\n      openable = val;\n\n      if (val) {\n        overlay = createOverlay();\n\n        if (mutation) {\n          mutation.observe(container, {\n            childList: true\n          });\n        }\n      } else {\n        overlay = null;\n\n        if (mutation) {\n          mutation.disconnect();\n        }\n\n        if (overlay) {\n          container.removeChild(overlay);\n        }\n      }\n\n      setListeners();\n      var openablechangeEvent = null;\n\n      if (typeof window.CustomEvent !== 'function') {\n        openablechangeEvent = document.createEvent('fig-gallery:openablechange');\n        openablechangeEvent.initCustomEvent('fig-gallery:openablechange', false, false, {\n          openable: val\n        });\n      } else {\n        openablechangeEvent = new CustomEvent('fig-gallery:openablechange', {\n          detail: {\n            openable: val\n          }\n        });\n      }\n      /**\r\n       * Event triggered when the gallery gets updated if openable or not.\r\n       *\r\n       * @event FigureGallery#fig-gallery:openablechange\r\n       * @type {object}\r\n       * @property {boolean} openable - Gets the current openable state.\r\n       */\n\n\n      container.dispatchEvent(openablechangeEvent);\n    }\n\n    return _this;\n  };\n  /**\r\n   * Forces the update of the child list.\r\n   * Useful when browser doesn't support MutationObserver.\r\n   *\r\n   * @param   {boolean}   [events=true]   Determines if the events should be\r\n   *                                      updated too.\r\n   *\r\n   * @return  {this}\r\n   */\n\n\n  this.updateFigures = function () {\n    var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    figures = container.querySelectorAll('figure');\n\n    if (!!events) {\n      figures.forEach(function (figure) {\n        figure.addEventListener('click', eventCallbacks.figureClick, false);\n      });\n    }\n\n    if (!(current in figures)) {\n      current = figures[0] || null;\n    }\n\n    return _this;\n  };\n  /**\r\n   * Tells if the the overlay is open or not.\r\n   *\r\n   * @return  {boolean}\r\n   */\n\n\n  this.isOpen = function () {\n    return container.classList.contains(openClass);\n  };\n  /**\r\n   * Tells if the the overlay is able to be open or not.\r\n   *\r\n   * @return  {boolean}\r\n   */\n\n\n  this.isOpenable = function () {\n    return openable;\n  };\n  /**\r\n   * Returns the container element.\r\n   *\r\n   * @return  {HTMLElement}\r\n   */\n\n\n  this.getContainer = function () {\n    return container;\n  };\n  /**\r\n   * Returns the current figure element.\r\n   *\r\n   * @return  {HTMLElement|null}\r\n   */\n\n\n  this.getCurrentFigure = function () {\n    return current;\n  };\n  /**\r\n   * Returns the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement|null}\r\n   */\n\n\n  this.getActiveFigure = function () {\n    if (overlay) {\n      return overlay.content.querySelector('figure');\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns the content of the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement|null}\r\n   */\n\n\n  this.getActiveContent = function () {\n    if (overlay) {\n      return overlay.getContent();\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns the swipe handler instance, if exists.\r\n   *\r\n   * @return  {SwipeEvent|null}\r\n   */\n\n\n  this.getSwipeHandler = function () {\n    return swipeHandler;\n  };\n}\n\nwindow.BUTTON_CONTAINER_PLACEMENT_POLICY = {\n  OUTSIDE_CONTENT: 'OUTSIDE_CONTENT',\n  INSIDE_CONTENT: 'INSIDE_CONTENT'\n};\nObject.freeze(window.BUTTON_CONTAINER_PLACEMENT_POLICY);\nwindow.BUTTON_PLACEMENT_POLICY = {\n  ALL: 'ALL',\n  NAVIGATORS_ONLY: 'NAVIGATORS_ONLY',\n  CLOSE_ONLY: 'CLOSE_ONLY'\n};\nObject.freeze(window.BUTTON_PLACEMENT_POLICY);\nwindow.RESIZE_POLICY = {\n  CONTENT: 'CONTENT',\n  CONTAINER: 'CONTAINER'\n};\nObject.freeze(window.RESIZE_POLICY);"]}