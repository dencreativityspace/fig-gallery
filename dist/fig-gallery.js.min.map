{"version":3,"sources":["fig-gallery/src/fig-gallery.js"],"names":["FigureGallery","_ref","_this","this","_ref$container","container","_ref$gallerySelector","gallerySelector","_ref$openSelector","openSelector","_ref$currentSelector","currentSelector","_ref$buttonContainerS","buttonContainerSelector","_ref$buttonSelectors","buttonSelectors","_ref$buttonContents","buttonContents","_ref$buttonsOrder","buttonsOrder","_ref$cycle","cycle","_ref$overlaySelectors","overlaySelectors","_ref$swipe","swipe","_ref$openable","openable","_ref$throwsOpenIndexE","throwsOpenIndexError","_ref$resizePolicy","resizePolicy","RESIZE_POLICY","CONTENT","_ref$buttonPlacementP","buttonPlacementPolicy","BUTTON_PLACEMENT_POLICY","ALL","_ref$buttonContainerP","buttonContainerPlacementPolicy","BUTTON_CONTAINER_PLACEMENT_POLICY","OUTSIDE_CONTENT","document","querySelector","HTMLElement","Error","length","indexOf","that","Object","assign","close","prev","next","overlay","content","galleryClass","substr","openClass","currentClass","buttonClasses","overlayClasses","classList","contains","add","figures","querySelectorAll","dialog","buttonContainer","tmp","selector","createElement","charAt","id","toUpperCase","appendChild","INSIDE_CONTENT","type","window","buttons","button","innerHTML","NAVIGATORS_ONLY","CLOSE_ONLY","getContent","current","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","figure","value","err","return","swipeHandler","SwipeEvent","element","itemSelector","activeSelector","eventCallbacks","containerClick","isOpen","open","figureClick","e","stopImmediatePropagation","target","tagName","parentNode","set","dialogClick","keyboardNavigation","which","keyCode","swipeNavigation","direction","detail","resize","setContentSize","keepInBound","index","arguments","setImageSize","image","overlayContentStyle","currentStyle","getComputedStyle","ratio","Math","min","clientWidth","parseFloat","marginLeft","marginRight","naturalWidth","clientHeight","marginTop","marginBottom","naturalHeight","style","width","height","CONTAINER","setVideoSize","video","videoWidth","videoHeight","setEmbedSize","embed","hasAttribute","parseInt","getAttribute","setAttribute","getFigureIndex","Array","prototype","call","setCurrentFigure","remove","updateOverlayFigure","figureClone","cloneNode","HTMLDialogElement","showModal","currFigure","replaceChild","firstChild","insertBefore","navigateOverlayFigure","dir","cycleState","setListeners","setListenersFn","forceFigures","addEventListener","mutation","forEach","attach","removeEventListener","detach","_arr","keys","_loop","_i","m","MutationObserver","mutations","mut","addedNodes","removedNodes","values","observe","childList","abs","concat","openedEvent","CustomEvent","createEvent","initCustomEvent","active","getActiveFigure","dispatchEvent","oldCurrent","prevEvent","nextEvent","settedEvent","old","closedEvent","setOpenable","val","disconnect","openablechangeEvent","updateFigures","events","isOpenable","getContainer","getCurrentFigure","getActiveContent","getSwipeHandler","freeze"],"mappings":"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","file":"fig-gallery.js","sourcesContent":["\"use strict\";\n\n/**\r\n * Gallery that permits to see images or videos at the maximum of their sizes\r\n * or, at least the maximum that fits in the window respecting ratio.\r\n *\r\n * @constructor\r\n *\r\n * @param {object} param\r\n * @param {string|HTMLElement} [param.container='#gallery'] Container of the gallery.\r\n * @param {string} [param.gallerySelector='.gallery'] Gallery selector.\r\n * @param {string} [param.openSelector='.open'] Selector for the open gallery.\r\n * @param {string} [param.currentSelector='.current'] Selector of the current element.\r\n * @param {string|null} [param.buttonContainerSelector=null] Selector of the container of the buttons. Must be a static element in the overlay or the overaly itself (rapresented by the value `null`).\r\n * @param {object} [param.buttonSelectors={}] Selectors for the overlay buttons.\r\n * @param {string} [param.buttonSelectors.close='.close'] Selector for the 'close' button.\r\n * @param {string} [param.buttonSelectors.prev='.prev'] Selector for the 'previous' button.\r\n * @param {string} [param.buttonSelectors.next='.next'] Selector for the 'next' button.\r\n * @param {object} [param.buttonContents={}] Contents for the overlay buttons.\r\n * @param {string} [param.buttonContents.close='&times;'] Content for the 'close' button.\r\n * @param {string} [param.buttonContents.prev='&lang;'] Content for the 'previous' button.\r\n * @param {string} [param.buttonContents.next='&rang;'] Content for the 'next' button.\r\n * @param {array} [param.buttonsOrder=['prev', 'next', 'close']] Orders of the buttons.\r\n * @param {object} [param.overlaySelectors={}] Selectors for the overlay elements.\r\n * @param {string} [param.overlaySelectors.overlay='.overlay'] Selector for the overlay element.\r\n * @param {string} [param.overlaySelectors.content='.overlay-content'] Selector content of the overlay element.\r\n * @param {boolean} [param.cycle=true] Determines if the gallery can cycle when reaches the end-points.\r\n * @param {boolean} [param.swipe=false] Determines if the gallery can be navigated with swipes.\r\n * @param {boolean} [param.openable=true] Determines if the gallery can be opened or not. If openable, shows the overlay.\r\n * @param {boolean} [param.throwsOpenIndexError=false] Determines if the gallery has to throw an error when the users tries to navigate beyond the elements.\r\n * @param {string} [resizePolicy='CONTENT'] Determines which element must be resized. Can be `'CONTAINER'` or `'CONTENT'`.\r\n * @param {string} [buttonPlacementPolicy='ALL'] If `buttonContainerSelector` isn't `null`, permits to choose which button should be moved inside of it. Can be `'ALL'`, `'NAVIGATORS_ONLY'` or `'CLOSE_ONLY'`.\r\n * @param {string} [buttonContainerPlacementPolicy='OUTSIDE_CONTENT'] If `buttonContainerSelector` isn't `null`, permits to choose where button container must be placed. Can be `'OUTSIDE_CONTENT'` or `'INSIDE_CONTENT'`.\r\n *\r\n * @throws Will throw an error if the container argument isn't an HTMLElement.\r\n * @throws Will throw an error if the `buttonContainerPlacementPolicy` is invalid.\r\n * @throws Will throw an error if the `buttonPlacementPolicy` is invalid.\r\n * @throws Will throw an error if the `resizePolicy` is invalid.\r\n * @throws Will throw an error if the `buttonsOrder` doesn't include all the buttons.\r\n *\r\n * @version 1.7.1\r\n *\r\n * @author Gennaro Landolfi <gennarolandolfi@codedwork.it>\r\n */\nfunction FigureGallery(_ref) {\n  var _this = this;\n\n  var _ref$container = _ref.container,\n      container = _ref$container === void 0 ? '#gallery' : _ref$container,\n      _ref$gallerySelector = _ref.gallerySelector,\n      gallerySelector = _ref$gallerySelector === void 0 ? '.gallery' : _ref$gallerySelector,\n      _ref$openSelector = _ref.openSelector,\n      openSelector = _ref$openSelector === void 0 ? '.open' : _ref$openSelector,\n      _ref$currentSelector = _ref.currentSelector,\n      currentSelector = _ref$currentSelector === void 0 ? '.current' : _ref$currentSelector,\n      _ref$buttonContainerS = _ref.buttonContainerSelector,\n      buttonContainerSelector = _ref$buttonContainerS === void 0 ? null : _ref$buttonContainerS,\n      _ref$buttonSelectors = _ref.buttonSelectors,\n      buttonSelectors = _ref$buttonSelectors === void 0 ? {} : _ref$buttonSelectors,\n      _ref$buttonContents = _ref.buttonContents,\n      buttonContents = _ref$buttonContents === void 0 ? {} : _ref$buttonContents,\n      _ref$buttonsOrder = _ref.buttonsOrder,\n      buttonsOrder = _ref$buttonsOrder === void 0 ? ['prev', 'next', 'close'] : _ref$buttonsOrder,\n      _ref$cycle = _ref.cycle,\n      cycle = _ref$cycle === void 0 ? true : _ref$cycle,\n      _ref$overlaySelectors = _ref.overlaySelectors,\n      overlaySelectors = _ref$overlaySelectors === void 0 ? {} : _ref$overlaySelectors,\n      _ref$swipe = _ref.swipe,\n      swipe = _ref$swipe === void 0 ? false : _ref$swipe,\n      _ref$openable = _ref.openable,\n      openable = _ref$openable === void 0 ? true : _ref$openable,\n      _ref$throwsOpenIndexE = _ref.throwsOpenIndexError,\n      throwsOpenIndexError = _ref$throwsOpenIndexE === void 0 ? false : _ref$throwsOpenIndexE,\n      _ref$resizePolicy = _ref.resizePolicy,\n      resizePolicy = _ref$resizePolicy === void 0 ? RESIZE_POLICY.CONTENT : _ref$resizePolicy,\n      _ref$buttonPlacementP = _ref.buttonPlacementPolicy,\n      buttonPlacementPolicy = _ref$buttonPlacementP === void 0 ? BUTTON_PLACEMENT_POLICY.ALL : _ref$buttonPlacementP,\n      _ref$buttonContainerP = _ref.buttonContainerPlacementPolicy,\n      buttonContainerPlacementPolicy = _ref$buttonContainerP === void 0 ? BUTTON_CONTAINER_PLACEMENT_POLICY.OUTSIDE_CONTENT : _ref$buttonContainerP;\n\n  // Type-checks\n  if (typeof container === 'string') {\n    container = document.querySelector(container);\n  }\n\n  if (!(container instanceof HTMLElement)) {\n    throw new Error('The gallery container must be a valid DOM element.');\n  }\n\n  if (buttonContainerSelector != null) {\n    if (!BUTTON_PLACEMENT_POLICY[buttonPlacementPolicy]) {\n      throw new Error('The specified button placement policy is not defined.');\n    }\n\n    if (!BUTTON_CONTAINER_PLACEMENT_POLICY[buttonContainerPlacementPolicy]) {\n      throw new Error('The specified button container placement policy is not defined.');\n    }\n  }\n\n  if (!RESIZE_POLICY[resizePolicy]) {\n    throw new Error('The specified resize policy is not defined.');\n  }\n\n  if (buttonsOrder.length !== 3 || buttonsOrder.indexOf('prev') === -1 && buttonsOrder.indexOf('prev') === -1 && buttonsOrder.indexOf('close') === -1) {\n    throw new Error(\"The given order doesn't include all the buttons.\");\n  } // Shorthand to easily reach `this`.\n\n\n  var that = this; // Overlaps custom settings to default ones:\n\n  buttonSelectors = Object.assign({\n    close: '.close',\n    prev: '.prev',\n    next: '.next'\n  }, buttonSelectors);\n  buttonContents = Object.assign({\n    close: '&times;',\n    prev: '&lang;',\n    next: '&rang;'\n  }, buttonContents);\n  overlaySelectors = Object.assign({\n    overlay: '.overlay',\n    content: '.overlay-content'\n  }, overlaySelectors); // Class mapping:\n\n  /**\r\n   * CSS class of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var galleryClass = gallerySelector.substr(1);\n  /**\r\n   * CSS class for the open state of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var openClass = openSelector.substr(1);\n  /**\r\n   * CSS class for the current figure. Applies to the original selected <figure>\r\n   * and the chosen one. Can be applied only to one element at the time.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var currentClass = currentSelector.substr(1);\n  /**\r\n   * Object containing the CSS classes that get applied to the buttons of the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var buttonClasses = {\n    close: buttonSelectors.close.substr(1),\n    prev: buttonSelectors.prev.substr(1),\n    next: buttonSelectors.next.substr(1)\n  };\n  /**\r\n   * Object containing the CSS classes that get applied to the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var overlayClasses = {\n    overlay: overlaySelectors.overlay.substr(1),\n    content: overlaySelectors.content.substr(1)\n  }; // Sets the gallery class.\n\n  if (!container.classList.contains(galleryClass)) {\n    container.classList.add(galleryClass);\n  }\n  /**\r\n   * Gets all the <figure> elements children of container.\r\n   *\r\n   * @type {NodeList}\r\n   *\r\n   * @private\r\n   */\n\n\n  var figures = container.querySelectorAll('figure');\n  /**\r\n  * Represents the overlay element.\r\n  *\r\n  * @type {HTMLDialogElement|HTMLDivElement}\r\n  *\r\n  * @property {object} buttons - Contains the buttons contained in the overlay.\r\n  * @property {HTMLElement} content - Contains the content container.\r\n  * @method content.getContent() - Gets the content of overlay.content.\r\n  *\r\n  * @private\r\n  */\n\n  var overlay = function () {\n    /**\r\n     * Refers to the `.overlay` element.\r\n     *\r\n     * @type {HTMLElement|null}\r\n     *\r\n     * @property {HTMLElement} content - Contains the content container.\r\n     *\r\n     * @rivate\r\n     *\r\n     * @throws Throws an error when the `buttonContainerSelector` is too complex.\r\n     */\n    var dialog = container.querySelector(overlaySelectors.overlay);\n\n    var buttonContainer = function () {\n      if (buttonContainerSelector == null) {\n        return null;\n      }\n\n      var tmp = dialog.querySelector(buttonContainerSelector);\n\n      if (!tmp) {\n        var selector = buttonContainerSelector.substr(1);\n        tmp = document.createElement('div');\n\n        if (buttonContainerSelector.charAt(0) === '#') {\n          tmp.id = selector;\n        } else if (buttonContainerSelector.charAt(0) === '.') {\n          tmp.classList.add(selector);\n        } else {\n          throw new Error('buttonContainerSelector must be a class or an ID. Complex selector given.');\n        }\n\n        if (buttonContainerPlacementPolicy.toUpperCase() === BUTTON_CONTAINER_PLACEMENT_POLICY.OUTSIDE_CONTENT) {\n          dialog.appendChild(tmp);\n        } else if (buttonContainerPlacementPolicy.toUpperCase() === BUTTON_CONTAINER_PLACEMENT_POLICY.INSIDE_CONTENT) {\n          dialog.content.appendChild(tmp);\n        }\n      }\n\n      return tmp;\n    }();\n\n    if (!dialog) {\n      // Initalizes overlay\n      dialog = document.createElement('HTMLDialogElement' in window ? 'dialog' : 'div');\n      dialog.classList.add(overlayClasses.overlay);\n      /**\r\n       * Refers to the .`overlay-content` element.\r\n       *\r\n       * @type {HTMLDivElement}\r\n       *\r\n       * @public\r\n       */\n\n      dialog.content = document.createElement('div');\n      dialog.content.classList.add(overlayClasses.content);\n      dialog.appendChild(dialog.content);\n      container.appendChild(dialog);\n    }\n    /**\r\n     * Object containing the buttons in the overlay.\r\n     *\r\n     * @enum {HTMLButtonElement}\r\n     *\r\n     * @public\r\n     */\n\n\n    dialog.buttons = {};\n\n    for (var type in buttonsOrder) {\n      var button = dialog.querySelector(buttonSelectors[type]);\n\n      if (!button) {\n        button = document.createElement('button');\n        button.classList.add(buttonClasses[type]);\n        button.innerHTML = buttonContents[type];\n\n        if (buttonContainer === null) {\n          dialog.appendChild(button);\n        } else {\n          if (buttonPlacementPolicy.toUpperCase() === BUTTON_PLACEMENT_POLICY.ALL) {\n            buttonContainer.appendChild(button);\n          } else {\n            if (buttonPlacementPolicy.toUpperCase() === BUTTON_PLACEMENT_POLICY.NAVIGATORS_ONLY) {\n              if (type !== 'close') {\n                buttonContainer.appendChild(button);\n              } else {\n                dialog.appendChild(button);\n              }\n            } else if (buttonPlacementPolicy.toUpperCase() === BUTTON_PLACEMENT_POLICY.CLOSE_ONLY) {\n              if (type === 'close') {\n                buttonContainer.appendChild(button);\n              } else {\n                dialog.appendChild(button);\n              }\n            }\n          }\n        }\n      }\n\n      dialog.buttons[type] = button;\n    }\n    /**\r\n     * Utility function to get the content of the current figure.\r\n     *\r\n     * @function\r\n     *\r\n     * @return {HTMLImageElement|HTMLVideoElement|HTMLObjectElement|HTMLEmbedElement|HTMLIFrameElement|null}\r\n     */\n\n\n    dialog.getContent = function () {\n      return dialog.content.querySelector('img, video, object, embed, iframe');\n    };\n\n    return dialog;\n  }();\n  /**\r\n  * Represents the current element in container.\r\n  *\r\n  * @type {HTMLElement}\r\n  *\r\n  * @private\r\n  */\n\n\n  var current = function () {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = figures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var figure = _step.value;\n\n        if (figure.classList.contains(currentClass)) {\n          return figure;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return figures[0] || null;\n  }();\n  /**\r\n  * Contains the swipe handler if SwipeEvent is present.\r\n  *\r\n  * @type {SwipeEvent|null}\r\n  *\r\n  * @private\r\n  *\r\n  * @see {@link https://github.com/dencreativityspace/swipe-event|swipe-event}\r\n  */\n\n\n  var swipeHandler = function () {\n    if (swipe && typeof SwipeEvent === 'function') {\n      return new SwipeEvent({\n        element: container,\n        itemSelector: 'figure',\n        activeSelector: currentSelector\n      });\n    }\n\n    return null;\n  }();\n  /**\r\n  * Stores the callbacks for the events.\r\n  *\r\n  * @type {object}\r\n  *\r\n  * @private\r\n  */\n\n\n  var eventCallbacks = {\n    containerClick: function containerClick() {\n      if (!that.isOpen()) {\n        that.open(null);\n      }\n    },\n    figureClick: function figureClick(e) {\n      e.stopImmediatePropagation();\n      var figure = e.target;\n\n      while (figure.tagName !== 'FIGURE') {\n        figure = figure.parentNode;\n      }\n\n      that.set(figure).open(null);\n    },\n    dialogClick: function dialogClick(e) {\n      e.stopImmediatePropagation();\n\n      if (e.target.classList.contains(overlayClasses.overlay) && that.isOpen()) {\n        that.close();\n      }\n    },\n    keyboardNavigation: function keyboardNavigation(e) {\n      if (that.isOpen()) {\n        var key = e.which || e.keyCode || 0;\n\n        switch (key) {\n          case 27:\n            // Esc\n            that.close();\n            break;\n\n          case 37:\n            // Left arrow\n            that.prev();\n            break;\n\n          case 39:\n            // Right arrow\n            that.next();\n            break;\n\n          case 36:\n            // Home\n            that.open(0);\n            break;\n\n          case 35:\n            // End\n            that.open(-1);\n            break;\n        }\n      }\n    },\n    swipeNavigation: function swipeNavigation(e) {\n      var direction = e.detail.direction || e.direction || null;\n\n      if (direction === 'left') {\n        that.prev();\n      } else if (direction === 'right') {\n        that.next();\n      }\n    },\n    resize: function resize() {\n      setContentSize();\n    }\n  }; // Private methods\n\n  /**\r\n   * Keeps `<figure>`s index in bound.\r\n   *\r\n   * @param {number} index Index to check if in bound.\r\n   * @param {boolean} [cycleState=cycle] Determines if function have to keep\r\n   * in bound considering the possibility to cycle through the elements.\r\n   *\r\n   * @return {number}\r\n   * @private\r\n   */\n\n  function keepInBound(index) {\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    return (cycleState && index < 0 ? figures.length + index + figures.length : index) % figures.length;\n  }\n  /**\r\n   * Sets the maximum image size possible.\r\n   *\r\n   * @param {HTMLImageElement} image Image element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setImageSize(image) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / image.naturalWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / image.naturalHeight);\n\n      if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTENT) {\n        image.style.width = image.naturalWidth * ratio + 'px';\n        image.style.height = image.naturalHeight * ratio + 'px';\n      } else if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTAINER) {\n        overlay.content.style.width = image.naturalWidth * ratio + 'px';\n        overlay.content.style.height = image.naturalHeight * ratio + 'px';\n      }\n    }\n  }\n  /**\r\n   * Sets the maximum video size possible.\r\n   *\r\n   * @param {HTMLVideoElement} video Video element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setVideoSize(video) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / video.videoWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / video.videoHeight);\n\n      if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTENT) {\n        video.style.width = video.videoWidth * ratio + 'px';\n        video.style.height = video.videoHeight * ratio + 'px';\n      } else if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTAINER) {\n        overlay.content.style.width = video.videoWidth * ratio + 'px';\n        overlay.content.style.height = video.videoHeight * ratio + 'px';\n      }\n    }\n  }\n  /**\r\n   * Sets the maximum embed, object or iframe size possible.\r\n   *\r\n   * @param {HTMLEmbedElement|HTMLObjectElement|HTMLIFrameElement} embed Embed, object or iframe element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setEmbedSize(embed) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n\n      if (!embed.hasAttribute('data-width') || !embed.hasAttribute('data-height') || embed.width > parseInt(embed.getAttribute('data-width')) || embed.height > parseInt(embed.getAttribute('data-height'))) {\n        embed.setAttribute('data-width', embed.width);\n        embed.setAttribute('data-height', embed.height);\n      }\n\n      embed.width = parseInt(embed.getAttribute('data-width'));\n      embed.height = parseInt(embed.getAttribute('data-height'));\n      var ratio = Math.min((overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / embed.width, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / embed.height);\n\n      if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTAINER) {\n        overlay.content.style.width = embed.width * ratio + 'px';\n        overlay.content.style.height = embed.height * ratio + 'px';\n      }\n\n      embed.width = parseInt(embed.width * ratio);\n      embed.height = parseInt(embed.height * ratio);\n    }\n  }\n  /**\r\n   * Sets the maximum size possible for the current content of the overlay.\r\n   * Routes by the type of the element.\r\n   *\r\n   * @see setImageSize\r\n   * @see setVideoSize\r\n   * @see setEmbedSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function setContentSize() {\n    if (overlay) {\n      var content = overlay.getContent();\n\n      if (content) {\n        switch (content.tagName) {\n          case 'IMG':\n            setImageSize(content);\n            break;\n\n          case 'VIDEO':\n            setVideoSize(content);\n            break;\n\n          case 'EMBED':\n          case 'IFRAME':\n          case 'OBJECT':\n            setEmbedSize(content);\n        }\n      }\n    }\n  }\n  /**\r\n   * Gets the index of the given figure.\r\n   *\r\n   * @param {HTMLElement} figure\r\n   *\r\n   * @return {number}\r\n   *\r\n   * @private\r\n   */\n\n\n  function getFigureIndex(figure) {\n    return Array.prototype.indexOf.call(figures, figure);\n  }\n  /**\r\n   * Sets the given figure as current.\r\n   *\r\n   * @param {HTMLElement|Node} figure\r\n   *\r\n   * @private\r\n   */\n\n\n  function setCurrentFigure(figure) {\n    if (current != null) {\n      current.classList.remove(currentClass);\n    }\n\n    figure.classList.add(currentClass);\n    current = figure;\n  }\n  /**\r\n   * Updates the content of the overlay by cloning the current figure and\r\n   * opens the overlay.\r\n   *\r\n   * @see setContentSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function updateOverlayFigure() {\n    var figureClone = current.cloneNode(true);\n    container.classList.add(openClass);\n\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (!overlay.open) {\n          overlay.showModal();\n        }\n      } else {\n        overlay.classList.add(openClass);\n      }\n\n      var currFigure = overlay.content.querySelector('figure');\n\n      if (currFigure) {\n        overlay.content.replaceChild(figureClone, currFigure);\n      } else {\n        if (overlay.content.firstChild) {\n          overlay.content.insertBefore(figureClone, overlay.content.firstChild);\n        } else {\n          overlay.content.appendChild(figureClone);\n        }\n      }\n\n      setContentSize();\n    }\n  }\n  /**\r\n   * Lets the user navigate through the gallery.\r\n   *\r\n   * @param {number} [dir=1] Number of elements next or before the current.\r\n   * @param {boolean} [cycleState=cycle] Determines if the counter must cycle.\r\n   *\r\n   * @see setCurrentFigure\r\n   * @see updateOverlayFigure\r\n   *\r\n   * @private\r\n   */\n\n\n  function navigateOverlayFigure() {\n    var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    setCurrentFigure(figures[keepInBound(getFigureIndex(current) + dir, cycleState)]);\n\n    if (that.isOpen()) {\n      updateOverlayFigure();\n    }\n  }\n  /**\r\n   * Adds or removes all the event listeners to container.\r\n   *\r\n   * @function\r\n   *\r\n   * @param {boolean} [forceFigures=false] Determines if the update must be forced.\r\n   * Useful when MutationObserver isn't supported.\r\n   *\r\n   * @private\r\n   */\n\n\n  var setListeners = function setListenersFn() {\n    var forceFigures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (openable) {\n      // Click on the gallery\n      container.addEventListener('click', eventCallbacks.containerClick, false);\n      overlay.addEventListener('click', eventCallbacks.dialogClick, false);\n\n      if (forceFigures || !mutation) {\n        figures.forEach(function (figure) {\n          figure.addEventListener('click', eventCallbacks.figureClick, false);\n        });\n      } // Keyboard navigation\n\n\n      document.addEventListener('keydown', eventCallbacks.keyboardNavigation); // Swipe navigation - since 1.1.0\n\n      if (swipeHandler) {\n        /**\r\n         * @listens SwipeEvent#swipe\r\n         * @see {@link https://github.com/dencreativityspace/swipe-event|SwipeEvent}\r\n         */\n        swipeHandler.attach();\n        document.addEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.addEventListener('resize', eventCallbacks.resize);\n    } else {\n      container.removeEventListener('click', eventCallbacks.containerClick, false);\n      overlay.removeEventListener('click', eventCallbacks.dialogClick, false);\n      figures.forEach(function (figure) {\n        figure.removeEventListener('click', eventCallbacks.figureClick, false);\n      });\n      document.removeEventListener('keydown', eventCallbacks.keyboardNavigation);\n\n      if (swipeHandler) {\n        swipeHandler.detach();\n        document.removeEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.removeEventListener('resize', eventCallbacks.resize);\n    }\n\n    return setListenersFn;\n  }(true); // Binds the overlay buttons to the public methods\n\n\n  var _arr = Object.keys(overlay.buttons);\n\n  var _loop = function _loop() {\n    var type = _arr[_i];\n    overlay.buttons[type].addEventListener('click', function (e) {\n      e.stopImmediatePropagation();\n      that[type]();\n    }, false);\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop();\n  }\n  /**\r\n   * Will contain MutationObserver instance if supported.\r\n   *\r\n   * @type {MutationObserver|null}\r\n   *\r\n   * @private\r\n   */\n\n\n  var mutation = function () {\n    if ('MutationObserver' in window) {\n      var m = new MutationObserver(function (mutations) {\n        mutations.forEach(function (mut) {\n          if (mut.type === 'childList') {\n            figures = container.querySelectorAll('figure');\n\n            if (mut.addedNodes && mut.addedNodes.length > 0) {\n              mut.addedNodes.forEach(function (figure) {\n                if (figure.tagName === 'FIGURE') {\n                  figure.addEventListener('click', eventCallbacks.figureClick, false);\n                }\n              });\n            }\n\n            if (mut.removedNodes && current in mut.removedNodes.values()) {\n              current = figures[0] || null;\n            }\n          }\n        });\n      });\n      m.observe(container, {\n        childList: true\n      });\n      return m;\n    }\n\n    return null;\n  }(); // Public methods\n\n  /**\r\n   * Opens the overlay to show the `<figure>` with the given index or the current one.\r\n   *\r\n   * @param   {?number}   [index=0]   Index of the element to be shown.\r\n   *                                  If is null gets the current figure.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:opened\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to `true`\r\n   * and the given index is out of bound.\r\n  */\n\n\n  this.open = function () {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (index == null) {\n      index = getFigureIndex(current);\n    } else {\n      index = parseInt(index);\n\n      if (throwsOpenIndexError) {\n        if (index > figures.length - 1 || Math.abs(index) > figures.length - 1) {\n          throw new Error(\"The element #\".concat(index, \" cannot be found.\"));\n        }\n      } else {\n        index = keepInBound(index);\n      }\n    }\n\n    if (!that.isOpen() || figures[index] !== current) {\n      if (figures.length > 0 || index <= figures.length || current == null) {\n        setCurrentFigure(figures[0]);\n      }\n\n      if (current != null) {\n        updateOverlayFigure();\n      }\n    }\n\n    var openedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      openedEvent = document.createEvent('fig-gallery:opened');\n      openedEvent.initCustomEvent('fig-gallery:opened', false, false, {\n        current: current,\n        active: that.getActiveFigure()\n      });\n    } else {\n      openedEvent = new CustomEvent('fig-gallery:opened', {\n        detail: {\n          current: current,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets opened.\r\n     *\r\n     * @event FigureGallery#fig-gallery:opened\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(openedEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the previous `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:prev\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.prev = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(-1, cycleState);\n    var prevEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      prevEvent = document.createEvent('fig-gallery:prev');\n      prevEvent.initCustomEvent('fig-gallery:prev', false, false, {\n        current: current,\n        next: oldCurrent,\n        active: that.getActiveFigure()\n      });\n    } else {\n      prevEvent = new CustomEvent('fig-gallery:prev', {\n        detail: {\n          current: current,\n          next: oldCurrent,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets navigated to the previous element.\r\n     *\r\n     * @event FigureGallery#fig-gallery:prev\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} next - Old active <figure> element in container which succeeds the current.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(prevEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the next `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:next\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.next = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(1, cycleState);\n    var nextEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      nextEvent = document.createEvent('fig-gallery:next');\n      nextEvent.initCustomEvent('fig-gallery:next', false, false, {\n        current: current,\n        prev: oldCurrent,\n        active: that.getActiveFigure()\n      });\n    } else {\n      nextEvent = new CustomEvent('fig-gallery:next', {\n        detail: {\n          current: current,\n          prev: oldCurrent,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets navigated to the next element.\r\n     *\r\n     * @event FigureGallery#fig-gallery:next\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} prev - Old active <figure> element in container which precedes the current.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(nextEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the current `<figure>`.\r\n   *\r\n   * @param   {number|HTMLElement|Node}   figure   Index of the element or the\r\n   *                                          element itself to bet setted as\r\n   *                                          current.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:setted\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null.\r\n   * @throws Will throw an error if the argument isn't a child of the container.\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to true and if the user tries to go beyond the end-points.\r\n   * @throws Will throw an error if the argument isn't a valid element.\r\n  */\n\n\n  this.set = function (figure) {\n    if (!figure) {\n      throw new Error('The given element is not a valid value. Please, insert an integer or a DOM element.');\n    }\n\n    if (typeof figure === 'number') {\n      if (throwsOpenIndexError) {\n        if (figure > figures.length - 1 || Math.abs(figure) > figures.length - 1) {\n          throw new Error(\"The element #\".concat(figure, \" cannot be found.\"));\n        }\n      } else {\n        figure = keepInBound(figure);\n      }\n\n      figure = figures[figure];\n    } else if (figure instanceof HTMLElement) {\n      if (getFigureIndex(figure) < 0) {\n        throw new Error('The given element is not in this gallery.');\n      }\n    } else {\n      throw new Error('The given element is not a valid value. Please, insert an integer or a DOM element.');\n    }\n\n    var oldCurrent = current;\n    setCurrentFigure(figure);\n    updateOverlayFigure();\n    var settedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      settedEvent = document.createEvent('fig-gallery:setted');\n      settedEvent.initCustomEvent('fig-gallery:setted', false, false, {\n        current: current,\n        old: oldCurrent,\n        active: that.getActiveFigure()\n      });\n    } else {\n      settedEvent = new CustomEvent('fig-gallery:setted', {\n        detail: {\n          current: current,\n          old: oldCurrent,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets setted on a specific element.\r\n     *\r\n     * @event FigureGallery#fig-gallery:setted\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} old - Old active <figure> element in container.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(settedEvent);\n    return _this;\n  };\n  /**\r\n   * Closes the overlay.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:closed\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.close = function () {\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (overlay.open) {\n          overlay.close();\n        }\n      } else {\n        overlay.classList.remove(openClass);\n      }\n    }\n\n    container.classList.remove(openClass);\n    var closedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      closedEvent = document.createEvent('fig-gallery:closed');\n      closedEvent.initCustomEvent('fig-gallery:closed', false, false, {\n        current: current,\n        active: that.getActiveFigure()\n      });\n    } else {\n      closedEvent = new CustomEvent('fig-gallery:closed', {\n        detail: {\n          current: current,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets closed.\r\n     *\r\n     * @event FigureGallery#fig-gallery:closed\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     */\n\n\n    container.dispatchEvent(closedEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the gallery to be openable or not.\r\n   *\r\n   * @param   {boolean}   val\r\n   *\r\n   * @emits FigureGallery#fig-gallery:openablechange\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null or isn't a boolean.\r\n  */\n\n\n  this.setOpenable = function (val) {\n    if (typeof val !== 'boolean') {\n      throw new Error('The value must be a boolean.');\n    }\n\n    if (val !== openable) {\n      openable = val;\n\n      if (mutation) {\n        if (val) {\n          mutation.observe(container, {\n            childList: true\n          });\n        } else {\n          mutation.disconnect();\n        }\n      }\n\n      setListeners();\n      var openablechangeEvent = null;\n\n      if (typeof window.CustomEvent !== 'function') {\n        openablechangeEvent = document.createEvent('fig-gallery:openablechange');\n        openablechangeEvent.initCustomEvent('fig-gallery:openablechange', false, false, {\n          openable: val\n        });\n      } else {\n        openablechangeEvent = new CustomEvent('fig-gallery:openablechange', {\n          detail: {\n            openable: val\n          }\n        });\n      }\n      /**\r\n       * Event triggered when the gallery gets updated if openable or not.\r\n       *\r\n       * @event FigureGallery#fig-gallery:openablechange\r\n       * @type {object}\r\n       * @property {boolean} openable - Gets the current openable state.\r\n       */\n\n\n      container.dispatchEvent(openablechangeEvent);\n    }\n\n    return _this;\n  };\n  /**\r\n   * Forces the update of the child list.\r\n   * Useful when browser doesn't support MutationObserver.\r\n   *\r\n   * @param   {boolean}   [events=true]   Determines if the events should be\r\n   *                                      updated too.\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.updateFigures = function () {\n    var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    figures = container.querySelectorAll('figure');\n\n    if (!!events) {\n      figures.forEach(function (figure) {\n        figure.addEventListener('click', eventCallbacks.figureClick, false);\n      });\n    }\n\n    if (!(current in figures)) {\n      current = figures[0] || null;\n    }\n\n    return _this;\n  };\n  /**\r\n   * Tells if the the overlay is open or not.\r\n   *\r\n   * @return  {boolean}\r\n  */\n\n\n  this.isOpen = function () {\n    return container.classList.contains(openClass);\n  };\n  /**\r\n   * Tells if the the overlay is able to be open or not.\r\n   *\r\n   * @return  {boolean}\r\n  */\n\n\n  this.isOpenable = function () {\n    return openable;\n  };\n  /**\r\n   * Returns the container element.\r\n   *\r\n   * @return  {HTMLElement}\r\n  */\n\n\n  this.getContainer = function () {\n    return container;\n  };\n  /**\r\n   * Returns the current figure element.\r\n   *\r\n   * @return  {HTMLElement}\r\n  */\n\n\n  this.getCurrentFigure = function () {\n    return current;\n  };\n  /**\r\n   * Returns the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement}\r\n   */\n\n\n  this.getActiveFigure = function () {\n    return overlay.content;\n  };\n  /**\r\n   * Returns the content of the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement}\r\n   */\n\n\n  this.getActiveContent = function () {\n    return overlay.getContent();\n  };\n  /**\r\n   * Returns the swipe handler instance, if exists.\r\n   *\r\n   * @return  {SwipeEvent|null}\r\n   */\n\n\n  this.getSwipeHandler = function () {\n    return swipeHandler;\n  };\n}\n\nvar BUTTON_CONTAINER_PLACEMENT_POLICY = {\n  OUTSIDE_CONTENT: 'OUTSIDE_CONTENT',\n  INSIDE_CONTENT: 'INSIDE_CONTENT'\n};\nObject.freeze(BUTTON_CONTAINER_PLACEMENT_POLICY);\nvar BUTTON_PLACEMENT_POLICY = {\n  ALL: 'ALL',\n  NAVIGATORS_ONLY: 'NAVIGATORS_ONLY',\n  CLOSE_ONLY: 'CLOSE_ONLY'\n};\nObject.freeze(BUTTON_PLACEMENT_POLICY);\nvar RESIZE_POLICY = {\n  CONTENT: 'CONTENT',\n  CONTAINER: 'CONTAINER'\n};\nObject.freeze(RESIZE_POLICY);"]}