{"version":3,"sources":["fig-gallery/src/fig-gallery.js"],"names":["FigureGallery","_ref","_this","this","_ref$container","container","_ref$gallerySelector","gallerySelector","_ref$openSelector","openSelector","_ref$currentSelector","currentSelector","_ref$buttonContainerS","buttonContainerSelector","_ref$buttonSelectors","buttonSelectors","_ref$buttonContents","buttonContents","_ref$buttonsOrder","buttonsOrder","_ref$cycle","cycle","_ref$overlaySelectors","overlaySelectors","_ref$swipe","swipe","_ref$openable","openable","_ref$throwsOpenIndexE","throwsOpenIndexError","_ref$resizePolicy","resizePolicy","RESIZE_POLICY","CONTENT","_ref$buttonPlacementP","buttonPlacementPolicy","BUTTON_PLACEMENT_POLICY","ALL","_ref$buttonContainerP","buttonContainerPlacementPolicy","BUTTON_CONTAINER_PLACEMENT_POLICY","OUTSIDE_CONTENT","document","querySelector","HTMLElement","Error","length","indexOf","that","Object","assign","close","prev","next","overlay","content","galleryClass","substr","openClass","currentClass","buttonClasses","overlayClasses","classList","contains","add","figures","querySelectorAll","dialogCache","createOverlay","current","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","figure","value","err","return","swipeHandler","SwipeEvent","element","itemSelector","activeSelector","eventCallbacks","containerClick","isOpen","open","figureClick","e","stopImmediatePropagation","target","tagName","parentNode","set","dialogClick","keyboardNavigation","which","keyCode","swipeNavigation","direction","detail","resize","setContentSize","buttons","createButtonsCallbacks","keepInBound","index","arguments","getContent","setImageSize","image","overlayContentStyle","currentStyle","window","getComputedStyle","ratio","Math","min","clientWidth","parseFloat","marginLeft","marginRight","naturalWidth","clientHeight","marginTop","marginBottom","naturalHeight","toUpperCase","style","width","height","CONTAINER","setVideoSize","video","videoWidth","videoHeight","setEmbedSize","embed","hasAttribute","parseInt","getAttribute","setAttribute","appendChild","dialog","createElement","buttonContainer","tmp","selector","charAt","id","INSIDE_CONTENT","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","type","button","innerHTML","NAVIGATORS_ONLY","CLOSE_ONLY","getFigureIndex","Array","prototype","call","setCurrentFigure","remove","updateOverlayFigure","figureClone","cloneNode","HTMLDialogElement","showModal","currFigure","replaceChild","firstChild","insertBefore","navigateOverlayFigure","dir","cycleState","callbacks","_arr","keys","_loop","_i","setListeners","setListenersFn","forceFigures","addEventListener","mutation","forEach","attach","_arr2","_i2","removeEventListener","detach","_arr3","_i3","_type","m","MutationObserver","mutations","mut","addedNodes","removedNodes","values","observe","childList","abs","concat","openedEvent","CustomEvent","createEvent","initCustomEvent","active","getActiveFigure","dispatchEvent","oldCurrent","prevEvent","nextEvent","settedEvent","old","closedEvent","setOpenable","val","disconnect","removeChild","openablechangeEvent","updateFigures","events","isOpenable","getContainer","getCurrentFigure","getActiveContent","getSwipeHandler","freeze"],"mappings":"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","file":"fig-gallery.js","sourcesContent":["\"use strict\";\n\n/**\r\n * Gallery that permits to see images or videos at the maximum of their sizes\r\n * or, at least the maximum that fits in the window respecting ratio.\r\n * Removes the controls and caches the overlay.\r\n *\r\n * @constructor\r\n *\r\n * @param {object} param\r\n * @param {string|HTMLElement} [param.container='#gallery'] Container of the gallery.\r\n * @param {string} [param.gallerySelector='.gallery'] Gallery selector.\r\n * @param {string} [param.openSelector='.open'] Selector for the open gallery.\r\n * @param {string} [param.currentSelector='.current'] Selector of the current element.\r\n * @param {string|null} [param.buttonContainerSelector=null] Selector of the container of the buttons. Must be a static element in the overlay or the overaly itself (rapresented by the value `null`).\r\n * @param {object} [param.buttonSelectors={}] Selectors for the overlay buttons.\r\n * @param {string} [param.buttonSelectors.close='.close'] Selector for the 'close' button.\r\n * @param {string} [param.buttonSelectors.prev='.prev'] Selector for the 'previous' button.\r\n * @param {string} [param.buttonSelectors.next='.next'] Selector for the 'next' button.\r\n * @param {object} [param.buttonContents={}] Contents for the overlay buttons.\r\n * @param {string} [param.buttonContents.close='&times;'] Content for the 'close' button.\r\n * @param {string} [param.buttonContents.prev='&lang;'] Content for the 'previous' button.\r\n * @param {string} [param.buttonContents.next='&rang;'] Content for the 'next' button.\r\n * @param {array} [param.buttonsOrder=['prev', 'next', 'close']] Orders of the buttons.\r\n * @param {object} [param.overlaySelectors={}] Selectors for the overlay elements.\r\n * @param {string} [param.overlaySelectors.overlay='.overlay'] Selector for the overlay element.\r\n * @param {string} [param.overlaySelectors.content='.overlay-content'] Selector content of the overlay element.\r\n * @param {boolean} [param.cycle=true] Determines if the gallery can cycle when reaches the end-points.\r\n * @param {boolean} [param.swipe=false] Determines if the gallery can be navigated with swipes.\r\n * @param {boolean} [param.openable=true] Determines if the gallery can be opened or not. If openable, shows the overlay.\r\n * @param {boolean} [param.throwsOpenIndexError=false] Determines if the gallery has to throw an error when the users tries to navigate beyond the elements.\r\n * @param {string} [resizePolicy='CONTENT'] Determines which element must be resized. Can be `'CONTAINER'` or `'CONTENT'`.\r\n * @param {string} [buttonPlacementPolicy='ALL'] If `buttonContainerSelector` isn't `null`, permits to choose which button should be moved inside of it. Can be `'ALL'`, `'NAVIGATORS_ONLY'` or `'CLOSE_ONLY'`.\r\n * @param {string} [buttonContainerPlacementPolicy='OUTSIDE_CONTENT'] If `buttonContainerSelector` isn't `null`, permits to choose where button container must be placed. Can be `'OUTSIDE_CONTENT'` or `'INSIDE_CONTENT'`.\r\n *\r\n * @throws Will throw an error if the container argument isn't an HTMLElement.\r\n * @throws Will throw an error if the `buttonContainerPlacementPolicy` is invalid.\r\n * @throws Will throw an error if the `buttonPlacementPolicy` is invalid.\r\n * @throws Will throw an error if the `resizePolicy` is invalid.\r\n * @throws Will throw an error if the `buttonsOrder` doesn't include all the buttons.\r\n *\r\n * @version 1.7.3\r\n *\r\n * @author Gennaro Landolfi <gennarolandolfi@codedwork.it>\r\n */\nfunction FigureGallery(_ref) {\n  var _this = this;\n\n  var _ref$container = _ref.container,\n      container = _ref$container === void 0 ? '#gallery' : _ref$container,\n      _ref$gallerySelector = _ref.gallerySelector,\n      gallerySelector = _ref$gallerySelector === void 0 ? '.gallery' : _ref$gallerySelector,\n      _ref$openSelector = _ref.openSelector,\n      openSelector = _ref$openSelector === void 0 ? '.open' : _ref$openSelector,\n      _ref$currentSelector = _ref.currentSelector,\n      currentSelector = _ref$currentSelector === void 0 ? '.current' : _ref$currentSelector,\n      _ref$buttonContainerS = _ref.buttonContainerSelector,\n      buttonContainerSelector = _ref$buttonContainerS === void 0 ? null : _ref$buttonContainerS,\n      _ref$buttonSelectors = _ref.buttonSelectors,\n      buttonSelectors = _ref$buttonSelectors === void 0 ? {} : _ref$buttonSelectors,\n      _ref$buttonContents = _ref.buttonContents,\n      buttonContents = _ref$buttonContents === void 0 ? {} : _ref$buttonContents,\n      _ref$buttonsOrder = _ref.buttonsOrder,\n      buttonsOrder = _ref$buttonsOrder === void 0 ? ['prev', 'next', 'close'] : _ref$buttonsOrder,\n      _ref$cycle = _ref.cycle,\n      cycle = _ref$cycle === void 0 ? true : _ref$cycle,\n      _ref$overlaySelectors = _ref.overlaySelectors,\n      overlaySelectors = _ref$overlaySelectors === void 0 ? {} : _ref$overlaySelectors,\n      _ref$swipe = _ref.swipe,\n      swipe = _ref$swipe === void 0 ? false : _ref$swipe,\n      _ref$openable = _ref.openable,\n      openable = _ref$openable === void 0 ? true : _ref$openable,\n      _ref$throwsOpenIndexE = _ref.throwsOpenIndexError,\n      throwsOpenIndexError = _ref$throwsOpenIndexE === void 0 ? false : _ref$throwsOpenIndexE,\n      _ref$resizePolicy = _ref.resizePolicy,\n      resizePolicy = _ref$resizePolicy === void 0 ? RESIZE_POLICY.CONTENT : _ref$resizePolicy,\n      _ref$buttonPlacementP = _ref.buttonPlacementPolicy,\n      buttonPlacementPolicy = _ref$buttonPlacementP === void 0 ? BUTTON_PLACEMENT_POLICY.ALL : _ref$buttonPlacementP,\n      _ref$buttonContainerP = _ref.buttonContainerPlacementPolicy,\n      buttonContainerPlacementPolicy = _ref$buttonContainerP === void 0 ? BUTTON_CONTAINER_PLACEMENT_POLICY.OUTSIDE_CONTENT : _ref$buttonContainerP;\n\n  // Type-checks\n  if (typeof container === 'string') {\n    container = document.querySelector(container);\n  }\n\n  if (!(container instanceof HTMLElement)) {\n    throw new Error('The gallery container must be a valid DOM element.');\n  }\n\n  if (buttonContainerSelector != null) {\n    if (!BUTTON_PLACEMENT_POLICY[buttonPlacementPolicy]) {\n      throw new Error('The specified button placement policy is not defined.');\n    }\n\n    if (!BUTTON_CONTAINER_PLACEMENT_POLICY[buttonContainerPlacementPolicy]) {\n      throw new Error('The specified button container placement policy is not defined.');\n    }\n  }\n\n  if (!RESIZE_POLICY[resizePolicy]) {\n    throw new Error('The specified resize policy is not defined.');\n  }\n\n  if (buttonsOrder.length !== 3 || buttonsOrder.indexOf('prev') === -1 && buttonsOrder.indexOf('prev') === -1 && buttonsOrder.indexOf('close') === -1) {\n    throw new Error(\"The given order doesn't include all the buttons.\");\n  } // Shorthand to easily reach `this`.\n\n\n  var that = this; // Overlaps custom settings to default ones:\n\n  buttonSelectors = Object.assign({\n    close: '.close',\n    prev: '.prev',\n    next: '.next'\n  }, buttonSelectors);\n  buttonContents = Object.assign({\n    close: '&times;',\n    prev: '&lang;',\n    next: '&rang;'\n  }, buttonContents);\n  overlaySelectors = Object.assign({\n    overlay: '.overlay',\n    content: '.overlay-content'\n  }, overlaySelectors); // Class mapping:\n\n  /**\r\n   * CSS class of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var galleryClass = gallerySelector.substr(1);\n  /**\r\n   * CSS class for the open state of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var openClass = openSelector.substr(1);\n  /**\r\n   * CSS class for the current figure. Applies to the original selected <figure>\r\n   * and the chosen one. Can be applied only to one element at the time.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var currentClass = currentSelector.substr(1);\n  /**\r\n   * Object containing the CSS classes that get applied to the buttons of the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var buttonClasses = {\n    close: buttonSelectors.close.substr(1),\n    prev: buttonSelectors.prev.substr(1),\n    next: buttonSelectors.next.substr(1)\n  };\n  /**\r\n   * Object containing the CSS classes that get applied to the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var overlayClasses = {\n    overlay: overlaySelectors.overlay.substr(1),\n    content: overlaySelectors.content.substr(1)\n  }; // Sets the gallery class.\n\n  if (!container.classList.contains(galleryClass)) {\n    container.classList.add(galleryClass);\n  }\n  /**\r\n   * Gets all the <figure> elements children of container.\r\n   *\r\n   * @type {NodeList}\r\n   *\r\n   * @private\r\n   */\n\n\n  var figures = container.querySelectorAll('figure');\n  /**\r\n   * Caches the overlay when removed.\r\n   *\r\n   * @type {HTMLDialogElement|HTMLDivElement|null}\r\n   *\r\n   * @private\r\n   */\n\n  var dialogCache = null;\n  /**\r\n  * Represents the overlay element.\r\n  *\r\n  * @type {HTMLDialogElement|HTMLDivElement}\r\n  *\r\n  * @property {object} buttons - Contains the buttons contained in the overlay.\r\n  * @property {HTMLElement} content - Contains the content container.\r\n  * @method content.getContent() - Gets the content of overlay.content.\r\n  *\r\n  * @private\r\n  *\r\n  * @see createOverlay\r\n  */\n\n  var overlay = createOverlay();\n  /**\r\n  * Represents the current element in container.\r\n  *\r\n  * @type {HTMLElement}\r\n  *\r\n  * @private\r\n  */\n\n  var current = function () {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = figures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var figure = _step.value;\n\n        if (figure.classList.contains(currentClass)) {\n          return figure;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return figures[0] || null;\n  }();\n  /**\r\n  * Contains the swipe handler if SwipeEvent is present.\r\n  *\r\n  * @type {SwipeEvent|null}\r\n  *\r\n  * @private\r\n  *\r\n  * @see {@link https://github.com/dencreativityspace/swipe-event|swipe-event}\r\n  */\n\n\n  var swipeHandler = function () {\n    if (swipe && typeof SwipeEvent === 'function') {\n      return new SwipeEvent({\n        element: container,\n        itemSelector: 'figure',\n        activeSelector: currentSelector\n      });\n    }\n\n    return null;\n  }();\n  /**\r\n  * Stores the callbacks for the events.\r\n  *\r\n  * @type {object}\r\n  *\r\n  * @private\r\n  */\n\n\n  var eventCallbacks = {\n    containerClick: function containerClick() {\n      if (!that.isOpen()) {\n        that.open(null);\n      }\n    },\n    figureClick: function figureClick(e) {\n      e.stopImmediatePropagation();\n      var figure = e.target;\n\n      while (figure.tagName !== 'FIGURE') {\n        figure = figure.parentNode;\n      }\n\n      that.set(figure).open(null);\n    },\n    dialogClick: function dialogClick(e) {\n      e.stopImmediatePropagation();\n\n      if (e.target.classList.contains(overlayClasses.overlay) && that.isOpen()) {\n        that.close();\n      }\n    },\n    keyboardNavigation: function keyboardNavigation(e) {\n      if (that.isOpen()) {\n        var key = e.which || e.keyCode || 0;\n\n        switch (key) {\n          case 27:\n            // Esc\n            that.close();\n            break;\n\n          case 37:\n            // Left arrow\n            that.prev();\n            break;\n\n          case 39:\n            // Right arrow\n            that.next();\n            break;\n\n          case 36:\n            // Home\n            that.open(0);\n            break;\n\n          case 35:\n            // End\n            that.open(-1);\n            break;\n        }\n      }\n    },\n    swipeNavigation: function swipeNavigation(e) {\n      var direction = e.detail.direction || e.direction || null;\n\n      if (direction === 'left') {\n        that.prev();\n      } else if (direction === 'right') {\n        that.next();\n      }\n    },\n    resize: function resize() {\n      setContentSize();\n    },\n    buttons: createButtonsCallbacks()\n  }; // Private methods\n\n  /**\r\n   * Keeps `<figure>`s index in bound.\r\n   *\r\n   * @param {number} index Index to check if in bound.\r\n   * @param {boolean} [cycleState=cycle] Determines if function have to keep\r\n   * in bound considering the possibility to cycle through the elements.\r\n   *\r\n   * @return {number}\r\n   * @private\r\n   */\n\n  function keepInBound(index) {\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    return (cycleState && index < 0 ? figures.length + index + figures.length : index) % figures.length;\n  }\n  /**\r\n   * Sets the maximum image size possible.\r\n   *\r\n   * @param {HTMLImageElement} image Image element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setImageSize(image) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / image.naturalWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / image.naturalHeight);\n\n      if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTENT) {\n        image.style.width = image.naturalWidth * ratio + 'px';\n        image.style.height = image.naturalHeight * ratio + 'px';\n      } else if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTAINER) {\n        overlay.content.style.width = image.naturalWidth * ratio + 'px';\n        overlay.content.style.height = image.naturalHeight * ratio + 'px';\n      }\n    }\n  }\n  /**\r\n   * Sets the maximum video size possible.\r\n   *\r\n   * @param {HTMLVideoElement} video Video element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setVideoSize(video) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / video.videoWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / video.videoHeight);\n\n      if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTENT) {\n        video.style.width = video.videoWidth * ratio + 'px';\n        video.style.height = video.videoHeight * ratio + 'px';\n      } else if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTAINER) {\n        overlay.content.style.width = video.videoWidth * ratio + 'px';\n        overlay.content.style.height = video.videoHeight * ratio + 'px';\n      }\n    }\n  }\n  /**\r\n   * Sets the maximum embed, object or iframe size possible.\r\n   *\r\n   * @param {HTMLEmbedElement|HTMLObjectElement|HTMLIFrameElement} embed Embed, object or iframe element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setEmbedSize(embed) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n\n      if (!embed.hasAttribute('data-width') || !embed.hasAttribute('data-height') || embed.width > parseInt(embed.getAttribute('data-width')) || embed.height > parseInt(embed.getAttribute('data-height'))) {\n        embed.setAttribute('data-width', embed.width);\n        embed.setAttribute('data-height', embed.height);\n      }\n\n      embed.width = parseInt(embed.getAttribute('data-width'));\n      embed.height = parseInt(embed.getAttribute('data-height'));\n      var ratio = Math.min((overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / embed.width, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / embed.height);\n\n      if (resizePolicy.toUpperCase() === RESIZE_POLICY.CONTAINER) {\n        overlay.content.style.width = embed.width * ratio + 'px';\n        overlay.content.style.height = embed.height * ratio + 'px';\n      }\n\n      embed.width = parseInt(embed.width * ratio);\n      embed.height = parseInt(embed.height * ratio);\n    }\n  }\n  /**\r\n   * Sets the maximum size possible for the current content of the overlay.\r\n   * Routes by the type of the element.\r\n   *\r\n   * @see setImageSize\r\n   * @see setVideoSize\r\n   * @see setEmbedSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function setContentSize() {\n    if (overlay) {\n      var content = overlay.getContent();\n\n      if (content) {\n        switch (content.tagName) {\n          case 'IMG':\n            setImageSize(content);\n            break;\n\n          case 'VIDEO':\n            setVideoSize(content);\n            break;\n\n          case 'EMBED':\n          case 'IFRAME':\n          case 'OBJECT':\n            setEmbedSize(content);\n        }\n      }\n    }\n  }\n  /**\r\n   * Creates the overlay object or retrieves it from cache.\r\n   * May return null if `openable` is `false`.\r\n   *\r\n   * @return {HTMLDialogElement|HTMLDivElement|null}\r\n   *\r\n   * @see dialogCache\r\n   * @see overlay\r\n   *\r\n   * @private\r\n   *\r\n   * @throws Throws an error when the `buttonContainerSelector` is too complex.\r\n   */\n\n\n  function createOverlay() {\n    if (openable) {\n      if (dialogCache) {\n        container.appendChild(dialogCache);\n        return dialogCache;\n      } // Takes interval if already exists\n\n\n      var dialog = container.querySelector(overlaySelectors.overlay);\n\n      if (!dialog) {\n        // Initalizes overlay\n        dialog = document.createElement('HTMLDialogElement' in window ? 'dialog' : 'div');\n        dialog.classList.add(overlayClasses.overlay);\n        dialog.content = document.createElement('div');\n        dialog.content.classList.add(overlayClasses.content);\n        dialog.appendChild(dialog.content);\n      } // Takes buttons or creates them.\n\n\n      dialog.buttons = {};\n\n      var buttonContainer = function () {\n        if (buttonContainerSelector == null) {\n          return null;\n        }\n\n        var tmp = dialog.querySelector(buttonContainerSelector);\n\n        if (!tmp) {\n          var selector = buttonContainerSelector.substr(1);\n          tmp = document.createElement('div');\n\n          if (buttonContainerSelector.charAt(0) === '#') {\n            tmp.id = selector;\n          } else if (buttonContainerSelector.charAt(0) === '.') {\n            tmp.classList.add(selector);\n          } else {\n            throw new Error('buttonContainerSelector must be a class or an ID. Complex selector given.');\n          }\n\n          if (buttonContainerPlacementPolicy.toUpperCase() === BUTTON_CONTAINER_PLACEMENT_POLICY.OUTSIDE_CONTENT) {\n            dialog.appendChild(tmp);\n          } else if (buttonContainerPlacementPolicy.toUpperCase() === BUTTON_CONTAINER_PLACEMENT_POLICY.INSIDE_CONTENT) {\n            dialog.content.appendChild(tmp);\n          }\n        }\n\n        return tmp;\n      }();\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = buttonsOrder[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var type = _step2.value;\n          var button = dialog.querySelector(buttonSelectors[type]);\n\n          if (!button) {\n            button = document.createElement('button');\n            button.classList.add(buttonClasses[type]);\n            button.innerHTML = buttonContents[type];\n\n            if (buttonContainer === null) {\n              dialog.appendChild(button);\n            } else {\n              if (buttonPlacementPolicy.toUpperCase() === BUTTON_PLACEMENT_POLICY.ALL) {\n                buttonContainer.appendChild(button);\n              } else {\n                if (buttonPlacementPolicy.toUpperCase() === BUTTON_PLACEMENT_POLICY.NAVIGATORS_ONLY) {\n                  if (type !== 'close') {\n                    buttonContainer.appendChild(button);\n                  } else {\n                    dialog.appendChild(button);\n                  }\n                } else if (buttonPlacementPolicy.toUpperCase() === BUTTON_PLACEMENT_POLICY.CLOSE_ONLY) {\n                  if (type === 'close') {\n                    buttonContainer.appendChild(button);\n                  } else {\n                    dialog.appendChild(button);\n                  }\n                }\n              }\n            }\n          }\n\n          dialog.buttons[type] = button;\n        } // Utility to get the content of the current figure.\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      dialog.getContent = function () {\n        return dialog.content.querySelector('img, video, object, embed, iframe');\n      };\n\n      dialogCache = dialog;\n      container.appendChild(dialogCache);\n      return dialogCache;\n    }\n\n    return null;\n  }\n  /**\r\n   * Gets the index of the given figure.\r\n   *\r\n   * @param {HTMLElement} figure\r\n   *\r\n   * @return {number}\r\n   *\r\n   * @private\r\n   */\n\n\n  function getFigureIndex(figure) {\n    return Array.prototype.indexOf.call(figures, figure);\n  }\n  /**\r\n   * Sets the given figure as current.\r\n   *\r\n   * @param {HTMLElement|Node} figure\r\n   *\r\n   * @private\r\n   */\n\n\n  function setCurrentFigure(figure) {\n    if (current != null) {\n      current.classList.remove(currentClass);\n    }\n\n    figure.classList.add(currentClass);\n    current = figure;\n  }\n  /**\r\n   * Updates the content of the overlay by cloning the current figure and\r\n   * opens the overlay.\r\n   *\r\n   * @see setContentSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function updateOverlayFigure() {\n    var figureClone = current.cloneNode(true);\n    container.classList.add(openClass);\n\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (!overlay.open) {\n          overlay.showModal();\n        }\n      } else {\n        overlay.classList.add(openClass);\n      }\n\n      var currFigure = overlay.content.querySelector('figure');\n\n      if (currFigure) {\n        overlay.content.replaceChild(figureClone, currFigure);\n      } else {\n        if (overlay.content.firstChild) {\n          overlay.content.insertBefore(figureClone, overlay.content.firstChild);\n        } else {\n          overlay.content.appendChild(figureClone);\n        }\n      }\n\n      setContentSize();\n    }\n  }\n  /**\r\n   * Lets the user navigate through the gallery.\r\n   *\r\n   * @param {number} [dir=1] Number of elements next or before the current.\r\n   * @param {boolean} [cycleState=cycle] Determines if the counter must cycle.\r\n   *\r\n   * @see setCurrentFigure\r\n   * @see updateOverlayFigure\r\n   * @see getFigureIndex\r\n   * @see KeepInBound\r\n   *\r\n   * @private\r\n   */\n\n\n  function navigateOverlayFigure() {\n    var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    setCurrentFigure(figures[keepInBound(getFigureIndex(current) + dir, cycleState)]);\n\n    if (that.isOpen()) {\n      updateOverlayFigure();\n    }\n  }\n  /**\r\n   * Creates the object that will containt the button callbacks.\r\n   * Returns `null` if `overlay` doesn't exists.\r\n   * Useful for caching.\r\n   *\r\n   * @return {object|null}\r\n   *\r\n   * @see overlay\r\n   *\r\n   * @private\r\n   */\n\n\n  function createButtonsCallbacks() {\n    if (overlay) {\n      var callbacks = {};\n\n      var _arr = Object.keys(overlay.buttons);\n\n      var _loop = function _loop() {\n        var type = _arr[_i];\n\n        callbacks[type] = function (e) {\n          e.stopImmediatePropagation();\n          that[type]();\n        };\n      };\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        _loop();\n      }\n\n      return callbacks;\n    }\n\n    return null;\n  } // Event Listeners\n\n  /**\r\n   * Adds or removes all the event listeners to container.\r\n   * Uses `createButtonsCallbacks()` to create the button callbacks and\r\n   * appends them to `eventCallbacks`.\r\n   *\r\n   * @function\r\n   *\r\n   * @param {boolean} [forceFigures=false] Determines if the update must be forced.\r\n   * Useful when MutationObserver isn't supported.\r\n   *\r\n   * @see createButtonsCallbacks\r\n   * @see eventCallbacks\r\n   *\r\n   * @private\r\n   */\n\n\n  var setListeners = function setListenersFn() {\n    var forceFigures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (openable) {\n      // Click on the gallery\n      container.addEventListener('click', eventCallbacks.containerClick, false);\n\n      if (forceFigures || !mutation) {\n        figures.forEach(function (figure) {\n          figure.addEventListener('click', eventCallbacks.figureClick, false);\n        });\n      }\n\n      overlay.addEventListener('click', eventCallbacks.dialogClick, false); // Keyboard navigation\n\n      document.addEventListener('keydown', eventCallbacks.keyboardNavigation); // Swipe navigation - since 1.1.0\n\n      if (swipeHandler) {\n        swipeHandler.attach();\n        /**\r\n         * @listens SwipeEvent#swipe\r\n         * @see {@link https://github.com/dencreativityspace/swipe-event|SwipeEvent}\r\n         */\n\n        document.addEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.addEventListener('resize', eventCallbacks.resize); // Binds the overlay buttons to the public methods\n\n      if (overlay) {\n        if (!eventCallbacks.buttons) {\n          eventCallbacks.buttons = createButtonsCallbacks();\n        }\n\n        var _arr2 = Object.keys(overlay.buttons);\n\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n          var type = _arr2[_i2];\n          overlay.buttons[type].addEventListener('click', eventCallbacks.buttons[type], false);\n        }\n      }\n    } else {\n      container.removeEventListener('click', eventCallbacks.containerClick, false);\n      overlay.removeEventListener('click', eventCallbacks.dialogClick, false);\n      figures.forEach(function (figure) {\n        figure.removeEventListener('click', eventCallbacks.figureClick, false);\n      });\n      document.removeEventListener('keydown', eventCallbacks.keyboardNavigation);\n\n      if (swipeHandler) {\n        swipeHandler.detach();\n        document.removeEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.removeEventListener('resize', eventCallbacks.resize);\n\n      if (overlay) {\n        var _arr3 = Object.keys(overlay.buttons);\n\n        for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n          var _type = _arr3[_i3];\n\n          overlay.buttons[_type].removeEventListener('click', eventCallbacks.buttons[_type], false);\n        }\n      }\n    }\n\n    return setListenersFn;\n  }(true);\n  /**\r\n   * Will contain MutationObserver instance if supported.\r\n   *\r\n   * @constant\r\n   * @type {MutationObserver|null}\r\n   *\r\n   * @private\r\n   */\n\n\n  var mutation = function () {\n    if ('MutationObserver' in window) {\n      var m = new MutationObserver(function (mutations) {\n        mutations.forEach(function (mut) {\n          if (mut.type === 'childList') {\n            figures = container.querySelectorAll('figure');\n\n            if (mut.addedNodes && mut.addedNodes.length > 0) {\n              mut.addedNodes.forEach(function (figure) {\n                if (figure.tagName === 'FIGURE') {\n                  figure.addEventListener('click', eventCallbacks.figureClick, false);\n                }\n              });\n            }\n\n            if (mut.removedNodes && current in mut.removedNodes.values()) {\n              current = figures[0] || null;\n            }\n          }\n        });\n      });\n      m.observe(container, {\n        childList: true\n      });\n      return m;\n    }\n\n    return null;\n  }(); // Public methods\n\n  /**\r\n   * Opens the overlay to show the `<figure>` with the given index or the current one.\r\n   *\r\n   * @param   {?number}   [index=0]   Index of the element to be shown.\r\n   *                                  If is null gets the current figure.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:opened\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to `true`\r\n   * and the given index is out of bound.\r\n  */\n\n\n  this.open = function () {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (index == null) {\n      index = getFigureIndex(current);\n    } else {\n      index = parseInt(index);\n\n      if (throwsOpenIndexError) {\n        if (index > figures.length - 1 || Math.abs(index) > figures.length - 1) {\n          throw new Error(\"The element #\".concat(index, \" cannot be found.\"));\n        }\n      } else {\n        index = keepInBound(index);\n      }\n    }\n\n    if (!that.isOpen() || figures[index] !== current) {\n      if (figures.length > 0 || index <= figures.length || current == null) {\n        setCurrentFigure(figures[0]);\n      }\n\n      if (current != null) {\n        updateOverlayFigure();\n      }\n    }\n\n    var openedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      openedEvent = document.createEvent('fig-gallery:opened');\n      openedEvent.initCustomEvent('fig-gallery:opened', false, false, {\n        current: current,\n        active: that.getActiveFigure()\n      });\n    } else {\n      openedEvent = new CustomEvent('fig-gallery:opened', {\n        detail: {\n          current: current,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets opened.\r\n     *\r\n     * @event FigureGallery#fig-gallery:opened\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(openedEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the previous `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:prev\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.prev = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(-1, cycleState);\n    var prevEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      prevEvent = document.createEvent('fig-gallery:prev');\n      prevEvent.initCustomEvent('fig-gallery:prev', false, false, {\n        current: current,\n        next: oldCurrent,\n        active: that.getActiveFigure()\n      });\n    } else {\n      prevEvent = new CustomEvent('fig-gallery:prev', {\n        detail: {\n          current: current,\n          next: oldCurrent,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets navigated to the previous element.\r\n     *\r\n     * @event FigureGallery#fig-gallery:prev\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} next - Old active <figure> element in container which succeeds the current.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(prevEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the next `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:next\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.next = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(1, cycleState);\n    var nextEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      nextEvent = document.createEvent('fig-gallery:next');\n      nextEvent.initCustomEvent('fig-gallery:next', false, false, {\n        current: current,\n        prev: oldCurrent,\n        active: that.getActiveFigure()\n      });\n    } else {\n      nextEvent = new CustomEvent('fig-gallery:next', {\n        detail: {\n          current: current,\n          prev: oldCurrent,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets navigated to the next element.\r\n     *\r\n     * @event FigureGallery#fig-gallery:next\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} prev - Old active <figure> element in container which precedes the current.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(nextEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the current `<figure>`.\r\n   *\r\n   * @param   {number|HTMLElement|Node}   figure   Index of the element or the\r\n   *                                          element itself to bet setted as\r\n   *                                          current.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:setted\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null.\r\n   * @throws Will throw an error if the argument isn't a child of the container.\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to true and if the user tries to go beyond the end-points.\r\n   * @throws Will throw an error if the argument isn't a valid element.\r\n  */\n\n\n  this.set = function (figure) {\n    if (figure == null) {\n      throw new Error('The given element is not a valid value. Please, insert an integer or a DOM element.');\n    }\n\n    if (typeof figure === 'number') {\n      if (throwsOpenIndexError) {\n        if (figure > figures.length - 1 || Math.abs(figure) > figures.length - 1) {\n          throw new Error(\"The element #\".concat(figure, \" cannot be found.\"));\n        }\n      } else {\n        figure = keepInBound(figure);\n      }\n\n      figure = figures[figure];\n    } else if (figure instanceof HTMLElement) {\n      if (getFigureIndex(figure) < 0) {\n        throw new Error('The given element is not in this gallery.');\n      }\n    } else {\n      throw new Error('The given element is not a valid value. Please, insert an integer or a DOM element.');\n    }\n\n    var oldCurrent = current;\n    setCurrentFigure(figure);\n    updateOverlayFigure();\n    var settedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      settedEvent = document.createEvent('fig-gallery:setted');\n      settedEvent.initCustomEvent('fig-gallery:setted', false, false, {\n        current: current,\n        old: oldCurrent,\n        active: that.getActiveFigure()\n      });\n    } else {\n      settedEvent = new CustomEvent('fig-gallery:setted', {\n        detail: {\n          current: current,\n          old: oldCurrent,\n          active: that.getActiveFigure()\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets setted on a specific element.\r\n     *\r\n     * @event FigureGallery#fig-gallery:setted\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     * @property {HTMLElement} old - Old active <figure> element in container.\r\n     * @property {HTMLElement} active - Active <figure> element in overlay.\r\n     */\n\n\n    container.dispatchEvent(settedEvent);\n    return _this;\n  };\n  /**\r\n   * Closes the overlay.\r\n   *\r\n   * @emits FigureGallery#fig-gallery:closed\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.close = function () {\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (overlay.open) {\n          overlay.close();\n        }\n      } else {\n        overlay.classList.remove(openClass);\n      }\n    }\n\n    container.classList.remove(openClass);\n    var closedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      closedEvent = document.createEvent('fig-gallery:closed');\n      closedEvent.initCustomEvent('fig-gallery:closed', false, false, {\n        current: current\n      });\n    } else {\n      closedEvent = new CustomEvent('fig-gallery:closed', {\n        detail: {\n          current: current\n        }\n      });\n    }\n    /**\r\n     * Event triggered when the gallery gets closed.\r\n     *\r\n     * @event FigureGallery#fig-gallery:closed\r\n     * @type {object}\r\n     * @property {HTMLElement} current - Current active <figure> element in container.\r\n     */\n\n\n    container.dispatchEvent(closedEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the gallery to be openable or not.\r\n   *\r\n   * @param   {boolean}   val\r\n   *\r\n   * @emits FigureGallery#fig-gallery:openablechange\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null or isn't a boolean.\r\n  */\n\n\n  this.setOpenable = function (val) {\n    if (!val || typeof val !== 'boolean') {\n      throw new Error('The value must be a boolean.');\n    }\n\n    if (val !== openable) {\n      openable = val;\n\n      if (val) {\n        overlay = createOverlay();\n\n        if (mutation) {\n          mutation.observe(container, {\n            childList: true\n          });\n        }\n      } else {\n        overlay = null;\n\n        if (mutation) {\n          mutation.disconnect();\n        }\n\n        if (overlay) {\n          container.removeChild(overlay);\n        }\n      }\n\n      setListeners();\n      var openablechangeEvent = null;\n\n      if (typeof window.CustomEvent !== 'function') {\n        openablechangeEvent = document.createEvent('fig-gallery:openablechange');\n        openablechangeEvent.initCustomEvent('fig-gallery:openablechange', false, false, {\n          openable: val\n        });\n      } else {\n        openablechangeEvent = new CustomEvent('fig-gallery:openablechange', {\n          detail: {\n            openable: val\n          }\n        });\n      }\n      /**\r\n       * Event triggered when the gallery gets updated if openable or not.\r\n       *\r\n       * @event FigureGallery#fig-gallery:openablechange\r\n       * @type {object}\r\n       * @property {boolean} openable - Gets the current openable state.\r\n       */\n\n\n      container.dispatchEvent(openablechangeEvent);\n    }\n\n    return _this;\n  };\n  /**\r\n   * Forces the update of the child list.\r\n   * Useful when browser doesn't support MutationObserver.\r\n   *\r\n   * @param   {boolean}   [events=true]   Determines if the events should be\r\n   *                                      updated too.\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.updateFigures = function () {\n    var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    figures = container.querySelectorAll('figure');\n\n    if (!!events) {\n      figures.forEach(function (figure) {\n        figure.addEventListener('click', eventCallbacks.figureClick, false);\n      });\n    }\n\n    if (!(current in figures)) {\n      current = figures[0] || null;\n    }\n\n    return _this;\n  };\n  /**\r\n   * Tells if the the overlay is open or not.\r\n   *\r\n   * @return  {boolean}\r\n  */\n\n\n  this.isOpen = function () {\n    return container.classList.contains(openClass);\n  };\n  /**\r\n   * Tells if the the overlay is able to be open or not.\r\n   *\r\n   * @return  {boolean}\r\n  */\n\n\n  this.isOpenable = function () {\n    return openable;\n  };\n  /**\r\n   * Returns the container element.\r\n   *\r\n   * @return  {HTMLElement}\r\n  */\n\n\n  this.getContainer = function () {\n    return container;\n  };\n  /**\r\n   * Returns the current figure element.\r\n   *\r\n   * @return  {HTMLElement|null}\r\n  */\n\n\n  this.getCurrentFigure = function () {\n    return current;\n  };\n  /**\r\n   * Returns the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement|null}\r\n   */\n\n\n  this.getActiveFigure = function () {\n    return overlay.content.querySelector('figure');\n  };\n  /**\r\n   * Returns the content of the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement|null}\r\n   */\n\n\n  this.getActiveContent = function () {\n    return overlay.getContent();\n  };\n  /**\r\n   * Returns the swipe handler instance, if exists.\r\n   *\r\n   * @return  {SwipeEvent|null}\r\n   */\n\n\n  this.getSwipeHandler = function () {\n    return swipeHandler;\n  };\n}\n\nwindow.BUTTON_CONTAINER_PLACEMENT_POLICY = {\n  OUTSIDE_CONTENT: 'OUTSIDE_CONTENT',\n  INSIDE_CONTENT: 'INSIDE_CONTENT'\n};\nObject.freeze(window.BUTTON_CONTAINER_PLACEMENT_POLICY);\nwindow.BUTTON_PLACEMENT_POLICY = {\n  ALL: 'ALL',\n  NAVIGATORS_ONLY: 'NAVIGATORS_ONLY',\n  CLOSE_ONLY: 'CLOSE_ONLY'\n};\nObject.freeze(window.BUTTON_PLACEMENT_POLICY);\nwindow.RESIZE_POLICY = {\n  CONTENT: 'CONTENT',\n  CONTAINER: 'CONTAINER'\n};\nObject.freeze(window.RESIZE_POLICY);"]}