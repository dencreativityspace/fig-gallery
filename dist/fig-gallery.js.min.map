{"version":3,"sources":["fig-gallery/src/fig-gallery.js"],"names":["FigureGallery","_ref","_this","this","_ref$container","container","_ref$gallerySelector","gallerySelector","_ref$openSelector","openSelector","_ref$currentSelector","currentSelector","_ref$buttonContainerS","buttonContainerSelector","_ref$buttonSelectors","buttonSelectors","_ref$buttonContents","buttonContents","_ref$cycle","cycle","_ref$overlaySelectors","overlaySelectors","_ref$openable","openable","_ref$throwsOpenIndexE","throwsOpenIndexError","_ref$resizePolicy","resizePolicy","_ref$buttonPlacementP","buttonPlacementPolicy","document","querySelector","HTMLElement","Error","indexOf","that","Object","assign","close","prev","next","overlay","content","galleryClass","substr","openClass","currentClass","buttonClasses","overlayClasses","classList","contains","add","figures","querySelectorAll","dialog","buttonContainer","buttonContainerTmp","concat","type","createElement","window","appendChild","buttons","button","innerHTML","toUpperCase","getContent","current","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","figure","value","err","return","swipeHandler","SwipeEvent","element","itemSelector","activeSelector","eventCallbacks","containerClick","e","isOpen","open","figureClick","stopImmediatePropagation","target","tagName","parentNode","set","keyboardNavigation","which","keyCode","swipeNavigation","direction","detail","resize","setContentSize","keepInBound","index","arguments","length","setImageSize","image","overlayContentStyle","currentStyle","getComputedStyle","ratio","Math","min","clientWidth","parseFloat","marginLeft","marginRight","naturalWidth","clientHeight","marginTop","marginBottom","naturalHeight","style","width","height","setVideoSize","video","videoWidth","videoHeight","setEmbedSize","embed","hasAttribute","parseInt","getAttribute","setAttribute","getFigureIndex","Array","prototype","call","setCurrentFigure","remove","updateOverlayFigure","figureClone","cloneNode","HTMLDialogElement","showModal","currFigure","replaceChild","firstChild","insertBefore","navigateOverlayFigure","dir","cycleState","setListeners","setListenersFn","forceFigures","addEventListener","mutation","forEach","attach","removeEventListener","detach","_arr","keys","_loop","_i","m","MutationObserver","mutations","observer","mut","addedNodes","removedNodes","values","observe","childList","abs","openedEvent","CustomEvent","createEvent","initCustomEvent","dispatchEvent","oldCurrent","prevEvent","nextEvent","settedEvent","old","closedEvent","setOpenable","val","disconnect","openablechangeEvent","updateFigures","events","querySelctorAll","isOpenable","getContainer","getCurrentFigure","getActiveFigure","getActiveContent","getSwipeHandler"],"mappings":"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","file":"fig-gallery.js","sourcesContent":["\"use strict\";\n\n/**\r\n * Gallery that permits to see images or videos at the maximum of their sizes\r\n * or, at least the maximum that fits in the window respecting ratio.\r\n *\r\n * @constructor\r\n *\r\n * @param {object} param\r\n * @param {string|HTMLElement} [param.container='#gallery'] Container of the gallery.\r\n * @param {string} [param.gallerySelector='.gallery'] Gallery selector.\r\n * @param {string} [param.openSelector='.open'] Selector for the open gallery.\r\n * @param {string} [param.currentSelector='.current'] Selector of the current element.\r\n * @param {string|null} [param.buttonContainerSelector=null] Selector of the container of the buttons. Must be a static element in the overlay or the overaly itself (rapresented by the value `null`).\r\n * @param {object} [param.buttonSelectors={}] Selectors for the overlay buttons.\r\n * @param {string} [param.buttonSelectors.close='.close'] Selector for the 'close' button.\r\n * @param {string} [param.buttonSelectors.prev='.prev'] Selector for the 'previous' button.\r\n * @param {string} [param.buttonSelectors.next='.next'] Selector for the 'next' button.\r\n * @param {object} [param.buttonContents={}] Contents for the overlay buttons.\r\n * @param {string} [param.buttonContents.close='&times;'] Content for the 'close' button.\r\n * @param {string} [param.buttonContents.prev='&lang;'] Content for the 'previous' button.\r\n * @param {string} [param.buttonContents.next='&rang;'] Content for the 'next' button.\r\n * @param {object} [param.overlaySelectors={}] Selectors for the overlay elements.\r\n * @param {string} [param.overlaySelectors.overlay='.overlay'] Selector for the overlay element.\r\n * @param {string} [param.overlaySelectors.content='.overlay-content'] Selector content of the overlay element.\r\n * @param {boolean} [param.cycle=true] Determines if the gallery can cycle when reaches the end-points.\r\n * @param {boolean} [param.openable=true] Determines if the gallery can be opened or not. If openable, shows the overlay.\r\n * @param {boolean} [param.throwsOpenIndexError=false] Determines if the gallery has to throw an error when the users tries to navigate beyond the elements.\r\n * @param {string} [resizePolicy='CONTENT'] Determines which element must be resized. Can be `'CONTAINER'` or `'CONTENT'`.\r\n * @param {string} [buttonPlacementPolicy='ALL'] If `buttonContainerSelector` isn't `null`, permits to choose which button should be move inside of it. Can be `'ALL'`, `'NAVIGATORS_ONLY'` or `'CLOSE_ONLY'`.\r\n *\r\n * @throws Will throw an error if the container argument isn't an HTMLElement.\r\n * @throws Will throw an error if the `buttonPlacementPolicy` is invalid.\r\n * @throws Will throw an error if the `resizePolicy` is invalid.\r\n *\r\n * @version 1.4.1\r\n *\r\n * @author Gennaro Landolfi <gennarolandolfi@codedwork.it>\r\n */\nfunction FigureGallery(_ref) {\n  var _this = this;\n\n  var _ref$container = _ref.container,\n      container = _ref$container === void 0 ? '#gallery' : _ref$container,\n      _ref$gallerySelector = _ref.gallerySelector,\n      gallerySelector = _ref$gallerySelector === void 0 ? '.gallery' : _ref$gallerySelector,\n      _ref$openSelector = _ref.openSelector,\n      openSelector = _ref$openSelector === void 0 ? '.open' : _ref$openSelector,\n      _ref$currentSelector = _ref.currentSelector,\n      currentSelector = _ref$currentSelector === void 0 ? '.current' : _ref$currentSelector,\n      _ref$buttonContainerS = _ref.buttonContainerSelector,\n      buttonContainerSelector = _ref$buttonContainerS === void 0 ? null : _ref$buttonContainerS,\n      _ref$buttonSelectors = _ref.buttonSelectors,\n      buttonSelectors = _ref$buttonSelectors === void 0 ? {} : _ref$buttonSelectors,\n      _ref$buttonContents = _ref.buttonContents,\n      buttonContents = _ref$buttonContents === void 0 ? {} : _ref$buttonContents,\n      _ref$cycle = _ref.cycle,\n      cycle = _ref$cycle === void 0 ? true : _ref$cycle,\n      _ref$overlaySelectors = _ref.overlaySelectors,\n      overlaySelectors = _ref$overlaySelectors === void 0 ? {} : _ref$overlaySelectors,\n      _ref$openable = _ref.openable,\n      openable = _ref$openable === void 0 ? true : _ref$openable,\n      _ref$throwsOpenIndexE = _ref.throwsOpenIndexError,\n      throwsOpenIndexError = _ref$throwsOpenIndexE === void 0 ? false : _ref$throwsOpenIndexE,\n      _ref$resizePolicy = _ref.resizePolicy,\n      resizePolicy = _ref$resizePolicy === void 0 ? 'CONTENT' : _ref$resizePolicy,\n      _ref$buttonPlacementP = _ref.buttonPlacementPolicy,\n      buttonPlacementPolicy = _ref$buttonPlacementP === void 0 ? 'ALL' : _ref$buttonPlacementP;\n  var BUTTON_PLACEMENT_POLICY = ['ALL', 'NAVIGATORS_ONLY', 'CLOSE_ONLY'];\n  var RESIZE_POLICY = ['CONTENT', 'CONTAINER']; // Type-checks\n\n  if (typeof container === 'string') {\n    container = document.querySelector(container);\n  }\n\n  if (!(container instanceof HTMLElement)) {\n    throw new Error('The gallery container must be a valid DOM element.');\n  }\n\n  if (buttonContainerSelector !== null && BUTTON_PLACEMENT_POLICY.indexOf(buttonPlacementPolicy) <= -1) {\n    throw new Error('The specified button placement policy is not defined.');\n  }\n\n  if (RESIZE_POLICY.indexOf(resizePolicy) <= -1) {\n    throw new Error('The specified resize policy is not defined.');\n  } // Shorthand to easily reach `this`.\n\n\n  var that = this; // Overlaps custom settings to default ones:\n\n  buttonSelectors = Object.assign({\n    close: '.close',\n    prev: '.prev',\n    next: '.next'\n  }, buttonSelectors);\n  buttonContents = Object.assign({\n    close: '&times;',\n    prev: '&lang;',\n    next: '&rang;'\n  }, buttonContents);\n  overlaySelectors = Object.assign({\n    overlay: '.overlay',\n    content: '.overlay-content'\n  }, overlaySelectors); // Class mapping:\n\n  /**\r\n   * CSS class of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var galleryClass = gallerySelector.substr(1);\n  /**\r\n   * CSS class for the open state of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var openClass = openSelector.substr(1);\n  /**\r\n   * CSS class for the current figure. Applies to the original selected <figure>\r\n   * and the chosen one. Can be applied only to one element at the time.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var currentClass = currentSelector.substr(1);\n  /**\r\n   * Object containining the CSS classes that get applied to the buttons of the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var buttonClasses = {\n    close: buttonSelectors.close.substr(1),\n    prev: buttonSelectors.prev.substr(1),\n    next: buttonSelectors.next.substr(1)\n  };\n  /**\r\n   * Object containining the CSS classes that get applied to the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var overlayClasses = {\n    overlay: overlaySelectors.overlay.substr(1),\n    content: overlaySelectors.content.substr(1)\n  }; // Sets the gallery class.\n\n  if (!container.classList.contains(galleryClass)) {\n    container.classList.add(galleryClass);\n  }\n  /**\r\n   * Gets all the <figure> elements children of container.\r\n   *\r\n   * @type {HTMLElement[]}\r\n   *\r\n   * @private\r\n   */\n\n\n  var figures = container.querySelectorAll('figure');\n  /**\r\n  * Represents the overlay element.\r\n  *\r\n  * @type {HTMLDialogElement|HTMLDivElement}\r\n  *\r\n  * @private\r\n  */\n\n  var overlay = function () {\n    /**\r\n     * Refers to the .`overlay` element.\r\n     *\r\n     * @type {HTMLDialogElement|HTMLDivElement|null}\r\n     *\r\n     * @public\r\n     */\n    var dialog = container.querySelector(overlaySelectors.overlay);\n\n    var buttonContainer = function () {\n      if (buttonContainerSelector === null) {\n        return null;\n      }\n\n      var buttonContainerTmp = dialog.querySelector(buttonContainerSelector);\n\n      if (!buttonContainerTmp) {\n        throw new Error(\"'\".concat(buttonContainerSelector, \"' must be child of '\").concat(overlaySelectors.overlay, \"'.\"));\n      }\n\n      return buttonContainerTmp;\n    }();\n\n    if (!dialog) {\n      // Initalizes overlay\n      dialog = document.createElement('HTMLDialogElement' in window ? 'dialog' : 'div');\n      dialog.classList.add(overlayClasses.overlay);\n      /**\r\n       * Refers to the .`overlay-content` element.\r\n       *\r\n       * @type {HTMLDivElement}\r\n       *\r\n       * @public\r\n       */\n\n      dialog.content = document.createElement('div');\n      dialog.content.classList.add(overlayClasses.content);\n      dialog.appendChild(dialog.content);\n      container.appendChild(dialog);\n    }\n    /**\r\n     * Object containining the buttons in the overlay.\r\n     *\r\n     * @enum {HTMLButtonElement}\r\n     *\r\n     * @public\r\n     */\n\n\n    dialog.buttons = {};\n\n    for (var type in buttonSelectors) {\n      var button = dialog.querySelector(buttonSelectors[type]);\n\n      if (!button) {\n        button = document.createElement('button');\n        button.classList.add(buttonClasses[type]);\n        button.innerHTML = buttonContents[type];\n\n        if (buttonContainer === null) {\n          dialog.appendChild(button);\n        } else {\n          if (buttonPlacementPolicy.toUpperCase() === 'ALL') {\n            buttonContainer.appendChild(button);\n          } else {\n            if (buttonPlacementPolicy.toUpperCase() === 'NAVIGATORS_ONLY') {\n              if (type !== 'close') {\n                buttonContainer.appendChild(button);\n              } else {\n                dialog.appendChild(button);\n              }\n            } else if (buttonPlacementPolicy.toUpperCase() === 'CLOSE_ONLY') {\n              if (type === 'close') {\n                buttonContainer.appendChild(button);\n              } else {\n                dialog.appendChild(button);\n              }\n            }\n          }\n        }\n      }\n\n      dialog.buttons[type] = button;\n    }\n    /**\r\n     * Utility function to get the content of the current figure.\r\n     *\r\n     * @function\r\n     *\r\n     * @return {HTMLImageElement|HTMLVideoElement|HTMLObjectElement|HTMLEmbedElement|HTMLIFrameElement|null}\r\n     */\n\n\n    dialog.getContent = function () {\n      return dialog.content.querySelector('img, video, object, embed, iframe');\n    };\n\n    return dialog;\n  }();\n  /**\r\n  * Represents the current element in container.\r\n  *\r\n  * @type {HTMLElement}\r\n  *\r\n  * @private\r\n  */\n\n\n  var current = function () {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = figures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var figure = _step.value;\n\n        if (figure.classList.contains(currentClass)) {\n          return figure;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return figures[0] || null;\n  }();\n  /**\r\n  * Contains the swipe handler if SwipeEvent is present.\r\n  *\r\n  * @type {SwipeEvent|null}\r\n  *\r\n  * @private\r\n  *\r\n  * @see {@link https://github.com/dencreativityspace/swipe-event|swipe-event}\r\n  */\n\n\n  var swipeHandler = function () {\n    if (typeof SwipeEvent === 'function') {\n      var swipe = new SwipeEvent({\n        element: container,\n        itemSelector: 'figure',\n        activeSelector: currentSelector\n      });\n      return swipe;\n    }\n\n    return null;\n  }();\n  /**\r\n  * Stores the callbacks for the events.\r\n  *\r\n  * @type {object}\r\n  *\r\n  * @private\r\n  */\n\n\n  var eventCallbacks = {\n    containerClick: function containerClick(e) {\n      if (!that.isOpen()) {\n        that.open(null);\n      }\n    },\n    figureClick: function figureClick(e) {\n      e.stopImmediatePropagation();\n      var figure = e.target;\n\n      while (figure.tagName !== 'FIGURE') {\n        figure = figure.parentNode;\n      }\n\n      that.set(figure).open(null);\n    },\n    keyboardNavigation: function keyboardNavigation(e) {\n      if (that.isOpen()) {\n        var key = e.which || e.keyCode || 0;\n\n        switch (key) {\n          case 27:\n            // Esc\n            that.close();\n            break;\n\n          case 37:\n            // Left arrow\n            that.prev();\n            break;\n\n          case 39:\n            // Right arrow\n            that.next();\n            break;\n\n          case 36:\n            // Home\n            that.open(0);\n            break;\n\n          case 35:\n            // End\n            that.open(-1);\n            break;\n        }\n      }\n    },\n    swipeNavigation: function swipeNavigation(e) {\n      var direction = e.detail.direction || e.direction || null;\n\n      if (direction === 'left') {\n        that.prev();\n      } else if (direction === 'right') {\n        that.next();\n      }\n    },\n    resize: function resize() {\n      setContentSize();\n    }\n  }; // Private methods\n\n  /**\r\n   * Keeps `<figure>`s index in bound.\r\n   *\r\n   * @param {number} index Index to check if in bound.\r\n   * @param {boolean} [cycleState=cycle] Determines if function have to keep\r\n   * in bound considering the possibility to cycle through the elements.\r\n   *\r\n   * @return {number}\r\n   * @private\r\n   */\n\n  function keepInBound(index) {\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    return (cycleState && index < 0 ? figures.length + index + figures.length : index) % figures.length;\n  }\n  /**\r\n   * Sets the maximum image size possible.\r\n   *\r\n   * @param {HTMLImageElement} image Image element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setImageSize(image) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / image.naturalWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / image.naturalHeight);\n\n      if (resizePolicy.toUpperCase() === 'CONTENT') {\n        image.style.width = image.naturalWidth * ratio + 'px';\n        image.style.height = image.naturalHeight * ratio + 'px';\n      } else if (resizePolicy.toUpperCase() === 'CONTAINER') {\n        overlay.content.style.width = image.naturalWidth * ratio + 'px';\n        overlay.content.style.height = image.naturalHeight * ratio + 'px';\n      }\n    }\n  }\n  /**\r\n   * Sets the maximum video size possible.\r\n   *\r\n   * @param {HTMLVideoElement} video Video element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setVideoSize(video) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / video.videoWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / video.videoHeight);\n\n      if (resizePolicy.toUpperCase() === 'CONTENT') {\n        video.style.width = video.videoWidth * ratio + 'px';\n        video.style.height = video.videoHeight * ratio + 'px';\n      } else if (resizePolicy.toUpperCase() === 'CONTAINER') {\n        overlay.content.style.width = video.videoWidth * ratio + 'px';\n        overlay.content.style.height = video.videoHeight * ratio + 'px';\n      }\n    }\n  }\n  /**\r\n   * Sets the maximum embed, object or iframe size possible.\r\n   *\r\n   * @param {HTMLEmbedElement|HTMLObjectElement|HTMLIFrameElement} embed Embed, object or iframe element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setEmbedSize(embed) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n\n      if (!embed.hasAttribute('data-width') || !embed.hasAttribute('data-height') || embed.width > parseInt(embed.getAttribute('data-width')) || embed.height > parseInt(embed.getAttribute('data-height'))) {\n        embed.setAttribute('data-width', embed.width);\n        embed.setAttribute('data-height', embed.height);\n      }\n\n      embed.width = parseInt(embed.getAttribute('data-width'));\n      embed.height = parseInt(embed.getAttribute('data-height'));\n      var ratio = Math.min((overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / embed.width, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / embed.height);\n\n      if (resizePolicy.toUpperCase() === 'CONTAINER') {\n        overlay.content.style.width = embed.width * ratio + 'px';\n        overlay.content.style.height = embed.height * ratio + 'px';\n      }\n\n      embed.width = parseInt(embed.width * ratio);\n      embed.height = parseInt(embed.height * ratio);\n    }\n  }\n  /**\r\n   * Sets the maximum size possible for the current content of the overlay.\r\n   * Routes by the type of the element.\r\n   *\r\n   * @see setImageSize\r\n   * @see setVideoSize\r\n   * @see setEmbedSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function setContentSize() {\n    if (overlay) {\n      var content = overlay.getContent();\n\n      if (content) {\n        switch (content.tagName) {\n          case 'IMG':\n            setImageSize(content);\n            break;\n\n          case 'VIDEO':\n            setVideoSize(content);\n            break;\n\n          case 'EMBED':\n          case 'IFRAME':\n          case 'OBJECT':\n            setEmbedSize(content);\n        }\n      }\n    }\n  }\n  /**\r\n   * Gets the index of the given figure.\r\n   *\r\n   * @param {HTMLElement} figure\r\n   *\r\n   * @return {number}\r\n   *\r\n   * @private\r\n   */\n\n\n  function getFigureIndex(figure) {\n    return Array.prototype.indexOf.call(figures, figure);\n  }\n  /**\r\n   * Sets the given figure as current.\r\n   *\r\n   * @param {HTMLElement} figure\r\n   *\r\n   * @private\r\n   */\n\n\n  function setCurrentFigure(figure) {\n    if (current != null) {\n      current.classList.remove(currentClass);\n    }\n\n    figure.classList.add(currentClass);\n    current = figure;\n  }\n  /**\r\n   * Updates the content of the overlay by cloning the current figure and\r\n   * opens the overlay.\r\n   *\r\n   * @see setContentSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function updateOverlayFigure() {\n    var figureClone = current.cloneNode(true);\n    container.classList.add(openClass);\n\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (!overlay.open) {\n          overlay.showModal();\n        }\n      } else {\n        overlay.classList.add(openClass);\n      }\n\n      var currFigure = overlay.content.querySelector('figure');\n\n      if (currFigure) {\n        overlay.content.replaceChild(figureClone, currFigure);\n      } else {\n        if (overlay.content.firstChild) {\n          overlay.content.insertBefore(figureClone, overlay.content.firstChild);\n        } else {\n          overlay.content.appendChild(figureClone);\n        }\n      }\n\n      setContentSize();\n    }\n  }\n  /**\r\n   * Lets the user navigate through the gallery.\r\n   *\r\n   * @param {number} [dir=1] Number of elements next or before the current.\r\n   * @param {boolean} [cycleState=cycle] Determines if the counter must cycle.\r\n   *\r\n   * @see setCurrentFigure\r\n   * @see updateOverlayFigure\r\n   *\r\n   * @private\r\n   */\n\n\n  function navigateOverlayFigure() {\n    var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    setCurrentFigure(figures[keepInBound(getFigureIndex(current) + dir, cycleState)]);\n\n    if (that.isOpen()) {\n      updateOverlayFigure();\n    }\n  }\n  /**\r\n   * Adds or removes all the event listeners to container.\r\n   *\r\n   * @function\r\n   *\r\n   * @param {boolean} [forceFigures=false] Determines if the update must be forced.\r\n   * Useful when MutationObserver isn't supported.\r\n   *\r\n   * @private\r\n   */\n\n\n  var setListeners = function setListenersFn() {\n    var forceFigures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (openable) {\n      // Click on the gallery\n      container.addEventListener('click', eventCallbacks.containerClick, false);\n\n      if (forceFigures || !mutation) {\n        figures.forEach(function (figure) {\n          figure.addEventListener('click', eventCallbacks.figureClick, false);\n        });\n      } // Keyboard navigation\n\n\n      document.addEventListener('keydown', eventCallbacks.keyboardNavigation); // Swipe navigation - since 1.1.0\n\n      if (swipeHandler) {\n        /**\r\n         * @listens swipe-event#swipe\r\n         * @see {@link https://github.com/dencreativityspace/swipe-event|swipe-event}\r\n         */\n        swipeHandler.attach();\n        document.addEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.addEventListener('resize', eventCallbacks.resize);\n    } else {\n      container.removeEventListener('click', eventCallbacks.containerClick, false);\n      figures.forEach(function (figure) {\n        figure.removeEventListener('click', eventCallbacks.figureClick, false);\n      });\n      document.removeEventListener('keydown', eventCallbacks.keyboardNavigation);\n\n      if (swipeHandler) {\n        swipeHandler.detach();\n        document.removeEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.removeEventListener('resize', eventCallbacks.resize);\n    }\n\n    return setListenersFn;\n  }(true); // Binds the overlay buttons to the public methods\n\n\n  var _arr = Object.keys(overlay.buttons);\n\n  var _loop = function _loop() {\n    var type = _arr[_i];\n    overlay.buttons[type].addEventListener('click', function (e) {\n      e.stopImmediatePropagation();\n      that[type]();\n    }, false);\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop();\n  }\n  /**\r\n   * Will contain MutationObserver instance if supported.\r\n   *\r\n   * @type {MutationObserver|null}\r\n   *\r\n   * @private\r\n   */\n\n\n  var mutation = function () {\n    if ('MutationObserver' in window) {\n      var m = new MutationObserver(function (mutations, observer) {\n        mutations.forEach(function (mut) {\n          if (mut.type === 'childList') {\n            figures = container.querySelectorAll('figure');\n\n            if (mut.addedNodes && mut.addedNodes.length > 0) {\n              mut.addedNodes.forEach(function (figure) {\n                if (figure.tagName === 'FIGURE') {\n                  figure.addEventListener('click', eventCallbacks.figureClick, false);\n                }\n              });\n            }\n\n            if (mut.removedNodes && current in mut.removedNodes.values()) {\n              current = figures[0] || null;\n            }\n          }\n        });\n      });\n      m.observe(container, {\n        childList: true\n      });\n      return m;\n    }\n\n    return null;\n  }(); // Public methods\n\n  /**\r\n   * Opens the overlay to show the `<figure>` with the given index or the current one.\r\n   *\r\n   * @param   {?number}   [index=0]   Index of the element to be shown.\r\n   *                                  If is null gets the current figure.\r\n   *\r\n   * @emits FigureGallery#opened\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to `true`\r\n   * and the given index is out of bound.\r\n  */\n\n\n  this.open = function () {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (index == null) {\n      index = getFigureIndex(current);\n    } else {\n      index = parseInt(index);\n\n      if (throwsOpenIndexError) {\n        if (index > figures.length - 1 || Math.abs(index) > figures.length - 1) {\n          throw new Error(\"The element #\".concat(index, \" cannot be found.\"));\n        }\n      } else {\n        index = keepInBound(index);\n      }\n    }\n\n    if (!that.isOpen() || figures[index] !== current) {\n      if (figures.length > 0 || index <= figures.length || current == null) {\n        setCurrentFigure(figures[0]);\n      }\n\n      if (current != null) {\n        updateOverlayFigure();\n      }\n    }\n\n    var openedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      openedEvent = document.createEvent('opened');\n      openedEvent.initCustomEvent('opened', false, false, {\n        current: current\n      });\n    } else {\n      openedEvent = new CustomEvent('opened', {\n        detail: {\n          current: current\n        }\n      });\n    }\n\n    container.dispatchEvent(openedEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the previous `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#prev\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.prev = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(-1, cycleState);\n    var prevEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      prevEvent = document.createEvent('prev');\n      prevEvent.initCustomEvent('prev', false, false, {\n        current: current,\n        next: oldCurrent\n      });\n    } else {\n      prevEvent = new CustomEvent('prev', {\n        detail: {\n          current: current,\n          next: oldCurrent\n        }\n      });\n    }\n\n    container.dispatchEvent(prevEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the next `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#next\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.next = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(1, cycleState);\n    var nextEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      nextEvent = document.createEvent('next');\n      nextEvent.initCustomEvent('next', false, false, {\n        current: current,\n        prev: oldCurrent\n      });\n    } else {\n      nextEvent = new CustomEvent('next', {\n        detail: {\n          current: current,\n          prev: oldCurrent\n        }\n      });\n    }\n\n    container.dispatchEvent(nextEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the current `<figure>`.\r\n   *\r\n   * @param   {number|HTMLElement}   figure   Index of the element or the\r\n   *                                          element itself to bet setted as\r\n   *                                          current.\r\n   *\r\n   * @emits FigureGallery#setted\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null.\r\n   * @throws Will throw an error if the argument isn't a child of the container.\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to true and if the user tries to go beyond the end-points.\r\n   * @throws Will throw an error if the argument isn't a valid element.\r\n  */\n\n\n  this.set = function (figure) {\n    if (!figure) {\n      throw new Error('The given element is not a valid value. Please, insert an integer or a DOM element.');\n    }\n\n    if (typeof figure === 'number') {\n      if (throwsOpenIndexError) {\n        if (figure > figures.length - 1 || Math.abs(figure) > figures.length - 1) {\n          throw new Error(\"The element #\".concat(figure, \" cannot be found.\"));\n        }\n      } else {\n        figure = keepInBound(figure);\n      }\n\n      figure = figures[figure];\n    } else if (figure instanceof HTMLElement) {\n      if (getFigureIndex(figure) < 0) {\n        throw new Error('The given element is not in this gallery.');\n      }\n    } else {\n      throw new Error('The given element is not a valid value. Please, insert an integer or a DOM element.');\n    }\n\n    var oldCurrent = current;\n    setCurrentFigure(figure);\n    updateOverlayFigure();\n    var settedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      settedEvent = document.createEvent('setted');\n      settedEvent.initCustomEvent('setted', false, false, {\n        current: current,\n        old: oldCurrent\n      });\n    } else {\n      settedEvent = new CustomEvent('setted', {\n        detail: {\n          current: current,\n          old: oldCurrent\n        }\n      });\n    }\n\n    container.dispatchEvent(settedEvent);\n    return _this;\n  };\n  /**\r\n   * Closes the overlay.\r\n   *\r\n   * @emits FigureGallery#closed\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.close = function () {\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (overlay.open) {\n          overlay.close();\n        }\n      } else {\n        overlay.classList.remove(openClass);\n      }\n    }\n\n    var closedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      closedEvent = document.createEvent('closed');\n      closedEvent.initCustomEvent('closed', false, false, {\n        current: current\n      });\n    } else {\n      closedEvent = new CustomEvent('closed', {\n        detail: {\n          current: current\n        }\n      });\n    }\n\n    container.dispatchEvent(closedEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the gallery to be openable or not.\r\n   *\r\n   * @param   {boolean}   val\r\n   *\r\n   * @emits FigureGallery#openablechange\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null or isn't a boolean.\r\n  */\n\n\n  this.setOpenable = function (val) {\n    if (typeof val !== 'boolean') {\n      throw new Error('The value must be a boolean.');\n    }\n\n    if (val !== openable) {\n      openable = val;\n\n      if (mutation) {\n        if (val) {\n          mutation.observe(container, {\n            childList: true\n          });\n        } else {\n          mutation.disconnect();\n        }\n      }\n\n      setListeners();\n      var openablechangeEvent = null;\n\n      if (typeof window.CustomEvent !== 'function') {\n        openablechangeEvent = document.createEvent('openablechange');\n        openablechangeEvent.initCustomEvent('openablechange', false, false, {\n          openable: val\n        });\n      } else {\n        openablechangeEvent = new CustomEvent('openablechange', {\n          detail: {\n            openable: val\n          }\n        });\n      }\n\n      container.dispatchEvent(openablechangeEvent);\n    }\n\n    return _this;\n  };\n  /**\r\n   * Forces the update of the child list.\r\n   * Useful when browser doesn't support MutationObserver.\r\n   *\r\n   * @param   {boolean}   [events=true]   Determines if the events should be\r\n   *                                      updated too.\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.updateFigures = function () {\n    var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    figures = container.querySelctorAll('figure');\n\n    if (!!events) {\n      figures.forEach(function (figure) {\n        figure.addEventListener('click', eventCallbacks.figureClick, false);\n      });\n    }\n\n    if (!(current in figures)) {\n      current = figures[0] || null;\n    }\n\n    return _this;\n  };\n  /**\r\n   * Tells if the the overlay is open or not.\r\n   *\r\n   * @return  {boolean}\r\n  */\n\n\n  this.isOpen = function () {\n    return container.classList.contains(openClass);\n  };\n  /**\r\n   * Tells if the the overlay is able to be open or not.\r\n   *\r\n   * @return  {boolean}\r\n  */\n\n\n  this.isOpenable = function () {\n    return openable;\n  };\n  /**\r\n   * Returns the container element.\r\n   *\r\n   * @return  {HTMLElement}\r\n  */\n\n\n  this.getContainer = function () {\n    return container;\n  };\n  /**\r\n   * Returns the current figure element.\r\n   *\r\n   * @return  {HTMLElement}\r\n  */\n\n\n  this.getCurrentFigure = function () {\n    return current;\n  };\n  /**\r\n   * Returns the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement}\r\n   */\n\n\n  this.getActiveFigure = function () {\n    return overlay.content;\n  };\n  /**\r\n   * Returns the content of the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement}\r\n   */\n\n\n  this.getActiveContent = function () {\n    return overlay.getContent();\n  };\n  /**\r\n   * Returns the swipe handler instance, if exists.\r\n   *\r\n   * @return  {SwipeEvent|null}\r\n   */\n\n\n  this.getSwipeHandler = function () {\n    return swipeHandler;\n  };\n}"]}