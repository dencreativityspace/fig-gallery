{"version":3,"sources":["fig-gallery/src/fig-gallery.cache.js"],"names":["FigureGallery","_ref","_this","this","_ref$container","container","_ref$gallerySelector","gallerySelector","_ref$openSelector","openSelector","_ref$currentSelector","currentSelector","_ref$buttonSelectors","buttonSelectors","_ref$buttonContents","buttonContents","_ref$cycle","cycle","_ref$overlaySelectors","overlaySelectors","_ref$openable","openable","_ref$throwsOpenIndexE","throwsOpenIndexError","document","querySelector","HTMLElement","Error","that","Object","assign","close","prev","next","overlay","content","galleryClass","substr","openClass","currentClass","buttonClasses","overlayClasses","classList","contains","add","figures","querySelectorAll","dialogCache","createOverlay","current","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","figure","value","err","return","swipeHandler","SwipeEvent","element","itemSelector","activeSelector","eventCallbacks","containerClick","isOpen","open","figureClick","e","stopImmediatePropagation","set","target","keyboardNavigation","which","keyCode","swipeNavigation","direction","detail","resize","setContentSize","buttons","createButtonsCallbacks","keepInBound","index","arguments","length","getContent","tagName","setImageSize","image","overlayContentStyle","currentStyle","window","getComputedStyle","ratio","Math","min","clientWidth","parseFloat","marginLeft","marginRight","naturalWidth","clientHeight","marginTop","marginBottom","naturalHeight","style","width","height","setVideoSize","video","videoWidth","videoHeight","setEmbedSize","embed","hasAttribute","parseInt","getAttribute","setAttribute","appendChild","dialog","type","createElement","button","innerHTML","getFigureIndex","Array","prototype","indexOf","call","setCurrentFigure","remove","updateOverlayFigure","figureClone","cloneNode","HTMLDialogElement","showModal","navigateOverlayFigure","dir","cycleState","callbacks","_arr","keys","_loop","_i","setListeners","setListenersFn","forceFigures","addEventListener","mutation","forEach","attach","_arr2","_i2","removeEventListener","detach","_arr3","_i3","_type","m","MutationObserver","mutations","observer","mut","addedNodes","removedNodes","values","observe","childList","abs","concat","openedEvent","CustomEvent","createEvent","initCustomEvent","dispatchEvent","oldCurrent","prevEvent","nextEvent","settedEvent","old","closedEvent","setOpenable","val","disconnect","removeChild","openablechangeEvent","updateFigures","events","contaier","querySelctorAll","isOpenable","getContainer","getCurrentFigure","getActiveFigure","getActiveContent","getSwipeHandler"],"mappings":"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","file":"fig-gallery.cache.js","sourcesContent":["\"use strict\";\n\n/**\r\n * Gallery that permits to see images or videos at the maximum of their sizes\r\n * or, at least the maximum that fits in the window respecting ratio.\r\n * Removes the controls and caches the overlay.\r\n *\r\n * @constructor\r\n *\r\n * @param {object} param\r\n * @param {string|HTMLElement} [param.container='#gallery'] Container of the gallery.\r\n * @param {string} [param.gallerySelector='.gallery'] Gallery selector.\r\n * @param {string} [param.openSelector='.open'] Selector for the open gallery.\r\n * @param {string} [param.currentSelector='.current'] Selector of the current element.\r\n * @param {object} [param.buttonSelectors={}] Selectors for the overlay buttons.\r\n * @param {string} [param.buttonSelectors.close='.close'] Selector for the 'close' button.\r\n * @param {string} [param.buttonSelectors.prev='.prev'] Selector for the 'previous' button.\r\n * @param {string} [param.buttonSelectors.next='.next'] Selector for the 'next' button.\r\n * @param {object} [param.buttonContents={}] Contents for the overlay buttons.\r\n * @param {string} [param.buttonContents.close='&times;'] Content for the 'close' button.\r\n * @param {string} [param.buttonContents.prev='&lang;'] Content for the 'previous' button.\r\n * @param {string} [param.buttonContents.next='&rang;'] Content for the 'next' button.\r\n * @param {object} [param.overlaySelectors={}] Selectors for the overlay elements.\r\n * @param {string} [param.overlaySelectors.overlay='.overlay'] Selector for the overlay element.\r\n * @param {string} [param.overlaySelectors.content='.overlay-content'] Selector content of the overlay element.\r\n * @param {boolean} [param.cycle=true] Determines if the gallery can cycle when reaches the end-points.\r\n * @param {boolean} [param.openable=true] Determines if the gallery can be opened or not. If openable, shows the overlay.\r\n * @param {boolean} [param.throwsOpenIndexError=false] Determines if the gallery has to throw an error when the users tries to navigate beyond the elements.\r\n *\r\n *  @throws Will throw an error if the container argument isn't an HTMLElement.\r\n *\r\n * @version 1.2.0\r\n *\r\n * @author Gennaro Landolfi <gennarolandolfi@codedwork.it>\r\n */\nfunction FigureGallery(_ref) {\n  var _this = this;\n\n  var _ref$container = _ref.container,\n      container = _ref$container === void 0 ? '#gallery' : _ref$container,\n      _ref$gallerySelector = _ref.gallerySelector,\n      gallerySelector = _ref$gallerySelector === void 0 ? '.gallery' : _ref$gallerySelector,\n      _ref$openSelector = _ref.openSelector,\n      openSelector = _ref$openSelector === void 0 ? '.open' : _ref$openSelector,\n      _ref$currentSelector = _ref.currentSelector,\n      currentSelector = _ref$currentSelector === void 0 ? '.current' : _ref$currentSelector,\n      _ref$buttonSelectors = _ref.buttonSelectors,\n      buttonSelectors = _ref$buttonSelectors === void 0 ? {} : _ref$buttonSelectors,\n      _ref$buttonContents = _ref.buttonContents,\n      buttonContents = _ref$buttonContents === void 0 ? {} : _ref$buttonContents,\n      _ref$cycle = _ref.cycle,\n      cycle = _ref$cycle === void 0 ? true : _ref$cycle,\n      _ref$overlaySelectors = _ref.overlaySelectors,\n      overlaySelectors = _ref$overlaySelectors === void 0 ? {} : _ref$overlaySelectors,\n      _ref$openable = _ref.openable,\n      openable = _ref$openable === void 0 ? true : _ref$openable,\n      _ref$throwsOpenIndexE = _ref.throwsOpenIndexError,\n      throwsOpenIndexError = _ref$throwsOpenIndexE === void 0 ? false : _ref$throwsOpenIndexE;\n\n  // Type-checks\n  if (typeof container === 'string') {\n    container = document.querySelector(container);\n  }\n\n  if (!(container instanceof HTMLElement)) {\n    throw new Error('Il contenitore della galleria deve essere un elemento valido.');\n  } // Shorthand to easily reach `this`.\n\n\n  var that = this; // Overlaps custom settings to default ones:\n\n  buttonSelectors = Object.assign({\n    close: '.close',\n    prev: '.prev',\n    next: '.next'\n  }, buttonSelectors);\n  buttonContents = Object.assign({\n    close: '&times;',\n    prev: '&lang;',\n    next: '&rang;'\n  }, buttonContents);\n  overlaySelectors = Object.assign({\n    overlay: '.overlay',\n    content: '.overlay-content'\n  }, overlaySelectors); // Class mapping:\n\n  /**\r\n   * CSS class of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var galleryClass = gallerySelector.substr(1);\n  /**\r\n   * CSS class for the open state of the gallery. Applies to container.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var openClass = openSelector.substr(1);\n  /**\r\n   * CSS class for the current figure. Applies to the original selected <figure>\r\n   * and the chosen one. Can be applied only to one element at the time.\r\n   *\r\n   * @constant\r\n   * @type {string}\r\n   *\r\n   * @private\r\n   */\n\n  var currentClass = currentSelector.substr(1);\n  /**\r\n   * Object containining the CSS classes that get applied to the buttons of the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var buttonClasses = {\n    close: buttonSelectors.close.substr(1),\n    prev: buttonSelectors.prev.substr(1),\n    next: buttonSelectors.next.substr(1)\n  };\n  /**\r\n   * Object containining the CSS classes that get applied to the overlay.\r\n   *\r\n   * @constant\r\n   * @enum {string}\r\n   *\r\n   * @private\r\n   */\n\n  var overlayClasses = {\n    overlay: overlaySelectors.overlay.substr(1),\n    content: overlaySelectors.content.substr(1)\n  }; // Sets the gallery class.\n\n  if (!container.classList.contains(galleryClass)) {\n    container.classList.add(galleryClass);\n  }\n  /**\r\n   * Gets all the <figure> elements children of container.\r\n   *\r\n   * @type {HTMLElement[]}\r\n   *\r\n   * @private\r\n   */\n\n\n  var figures = container.querySelectorAll('figure');\n  /**\r\n   * Caches the overlay when removed.\r\n   *\r\n   * @type {HTMLDialogElement|HTMLDivElement|null}\r\n   *\r\n   * @private\r\n   */\n\n  var dialogCache = null;\n  /**\r\n  * Represents the overlay element.\r\n  *\r\n  * @type {HTMLDialogElement|HTMLDivElement}\r\n  *\r\n  * @private\r\n  *\r\n  * @see createOverlay\r\n  */\n\n  var overlay = createOverlay();\n  /**\r\n  * Represents the current element in container.\r\n  *\r\n  * @type {HTMLElement}\r\n  *\r\n  * @private\r\n  */\n\n  var current = function () {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = figures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var figure = _step.value;\n\n        if (figure.classList.contains(currentClass)) {\n          return figure;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return figures[0] || null;\n  }();\n  /**\r\n  * Contains the swipe handler if SwipeEvent is present.\r\n  *\r\n  * @type {SwipeEvent|null}\r\n  *\r\n  * @private\r\n  *\r\n  * @see {@link https://github.com/dencreativityspace/swipe-event|swipe-event}\r\n  */\n\n\n  var swipeHandler = function () {\n    if (typeof SwipeEvent === 'function') {\n      var swipe = new SwipeEvent({\n        element: container,\n        itemSelector: 'figure',\n        activeSelector: currentSelector\n      });\n      return swipe;\n    }\n\n    return null;\n  }();\n  /**\r\n  * Stores the callbacks for the events.\r\n  *\r\n  * @type {object}\r\n  *\r\n  * @private\r\n  */\n\n\n  var eventCallbacks = {\n    containerClick: function containerClick() {\n      if (!that.isOpen()) {\n        that.open(null);\n      }\n    },\n    figureClick: function figureClick(e) {\n      e.stopImmediatePropagation();\n      that.set(e.target).open(null);\n    },\n    keyboardNavigation: function keyboardNavigation(e) {\n      if (that.isOpen()) {\n        var key = e.which || e.keyCode || 0;\n\n        switch (key) {\n          case 27:\n            // Esc\n            that.close();\n            break;\n\n          case 37:\n            // Left arrow\n            that.prev();\n            break;\n\n          case 39:\n            // Right arrow\n            that.next();\n            break;\n\n          case 36:\n            // Home\n            that.open(0);\n            break;\n\n          case 35:\n            // End\n            that.open(-1);\n            break;\n        }\n      }\n    },\n    swipeNavigation: function swipeNavigation(e) {\n      var direction = e.detail.direction || e.direction || null;\n\n      if (direction === 'left') {\n        that.prev();\n      } else if (direction === 'right') {\n        that.next();\n      }\n    },\n    resize: function resize() {\n      setContentSize();\n    },\n    buttons: createButtonsCallbacks()\n  }; // Private methods\n\n  /**\r\n   * Keeps `<figure>`s index in bound.\r\n   *\r\n   * @param {number} index Index to check if in bound.\r\n   * @param {boolean} [cycleState=cycle] Determines if function have to keep\r\n   * in bound considering the possibility to cycle through the elements.\r\n   *\r\n   * @return {number}\r\n   * @private\r\n   */\n\n  function keepInBound(index) {\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    return (cycleState && index < 0 ? figures.length + index + figures.length : index) % figures.length;\n  }\n  /**\r\n   * Sets the maximum image size possible.\r\n   *\r\n   * @param {HTMLImageElement} image Image element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setImageSize(image) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / image.naturalWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / image.naturalHeight);\n      image.style.width = image.naturalWidth * ratio + 'px';\n      image.style.height = image.naturalHeight * ratio + 'px';\n    }\n  }\n  /**\r\n   * Sets the maximum video size possible.\r\n   *\r\n   * @param {HTMLVideoElement} video Video element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setVideoSize(video) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n      var ratio = Math.min(1, (overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / video.videoWidth, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / video.videoHeight);\n      video.style.width = video.videoWidth * ratio + 'px';\n      video.style.height = video.videoHeight * ratio + 'px';\n    }\n  }\n  /**\r\n   * Sets the maximum embed, object or iframe size possible.\r\n   *\r\n   * @param {HTMLEmbedElement|HTMLObjectElement|HTMLIFrameElement} embed Embed, object or iframe element to be resized.\r\n   *\r\n   * @private\r\n   */\n\n\n  function setEmbedSize(embed) {\n    if (overlay) {\n      var overlayContentStyle = overlay.content.currentStyle || window.getComputedStyle(overlay.content);\n\n      if (!embed.hasAttribute('data-width') || !embed.hasAttribute('data-height') || embed.width > parseInt(embed.getAttribute('data-width')) || embed.height > parseInt(embed.getAttribute('data-height'))) {\n        embed.setAttribute('data-width', embed.width);\n        embed.setAttribute('data-height', embed.height);\n      }\n\n      embed.width = parseInt(embed.getAttribute('data-width'));\n      embed.height = parseInt(embed.getAttribute('data-height'));\n      var ratio = Math.min((overlay.clientWidth - (parseFloat(overlayContentStyle.marginLeft) + parseFloat(overlayContentStyle.marginRight))) / embed.width, (overlay.clientHeight - (parseFloat(overlayContentStyle.marginTop) + parseFloat(overlayContentStyle.marginBottom))) / embed.height);\n      embed.width = parseInt(embed.width * ratio);\n      embed.height = parseInt(embed.height * ratio);\n    }\n  }\n  /**\r\n   * Sets the maximum size possible for the current content of the overlay.\r\n   * Routes by the type of the element.\r\n   *\r\n   * @see setImageSize\r\n   * @see setVideoSize\r\n   * @see setEmbedSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function setContentSize() {\n    if (overlay) {\n      var content = overlay.getContent();\n\n      if (content) {\n        switch (content.tagName) {\n          case 'IMG':\n            setImageSize(content);\n            break;\n\n          case 'VIDEO':\n            setVideoSize(content);\n            break;\n\n          case 'EMBED':\n          case 'IFRAME':\n          case 'OBJECT':\n            setEmbedSize(content);\n        }\n      }\n    }\n  }\n  /**\r\n   * Creates the overlay object or retrieves it from cache.\r\n   * May return null if `openable` is `false`.\r\n   *\r\n   * @return {HTMLDialogElement|HTMLDivElement|null}\r\n   *\r\n   * @see dialogCache\r\n   * @see overlay\r\n   *\r\n   * @private\r\n   */\n\n\n  function createOverlay() {\n    if (openable) {\n      if (dialogCache) {\n        container.appendChild(dialogCache);\n        return dialogCache;\n      } // Takes interval if already exists\n\n\n      var dialog = container.querySelector(overlaySelectors.overlay);\n\n      if (!dialog) {\n        // Initalizes overlay\n        dialog = document.createElement('HTMLDialogElement' in window ? 'dialog' : 'div');\n        dialog.classList.add(overlayClasses.overlay);\n        dialog.content = document.createElement('div');\n        dialog.content.classList.add(overlayClasses.content);\n        dialog.appendChild(dialog.content);\n      } // Takes buttons or creates them.\n\n\n      dialog.buttons = {};\n\n      for (var type in buttonSelectors) {\n        var button = dialog.querySelector(buttonSelectors[type]);\n\n        if (!button) {\n          button = document.createElement('button');\n          button.classList.add(buttonClasses[type]);\n          button.innerHTML = buttonContents[type];\n          dialog.appendChild(button);\n        }\n\n        dialog.buttons[type] = button;\n      } // Utility to get the content of the current figure.\n\n\n      dialog.getContent = function () {\n        return dialog.content.querySelector('img, video, object, embed, iframe');\n      };\n\n      dialogCache = dialog;\n      container.appendChild(dialogCache);\n      return dialogCache;\n    }\n\n    return null;\n  }\n  /**\r\n   * Gets the index of the given figure.\r\n   *\r\n   * @param {HTMLElement} figure\r\n   *\r\n   * @return {number}\r\n   *\r\n   * @private\r\n   */\n\n\n  function getFigureIndex(figure) {\n    return Array.prototype.indexOf.call(figures, figure);\n  }\n  /**\r\n   * Sets the given figure as current.\r\n   *\r\n   * @param {HTMLElement} figure\r\n   *\r\n   * @private\r\n   */\n\n\n  function setCurrentFigure(figure) {\n    if (current != null) {\n      current.classList.remove(currentClass);\n    }\n\n    figure.classList.add(currentClass);\n    current = figure;\n  }\n  /**\r\n   * Updates the content of the overlay by cloning the current figure and\r\n   * opens the overlay.\r\n   *\r\n   * @see setContentSize\r\n   *\r\n   * @private\r\n   */\n\n\n  function updateOverlayFigure() {\n    var figureClone = current.cloneNode(true);\n    container.classList.add(openClass);\n\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (!overlay.open) {\n          overlay.showModal();\n        }\n      } else {\n        overlay.classList.add(openClass);\n      }\n\n      overlay.content.innerHTML = '';\n      overlay.content.appendChild(figureClone);\n      setContentSize();\n    }\n  }\n  /**\r\n   * Lets the user navigate through the gallery.\r\n   *\r\n   * @param {number} [dir=1] Number of elements next or before the current.\r\n   * @param {boolean} [cycleState=cycle] Determines if the counter must cycle.\r\n   *\r\n   * @see setCurrentFigure\r\n   * @see updateOverlayFigure\r\n   *\r\n   * @private\r\n   */\n\n\n  function navigateOverlayFigure() {\n    var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var cycleState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cycle;\n    setCurrentFigure(figures[keepInBound(getFigureIndex(current) + dir, cycleState)]);\n\n    if (that.isOpen()) {\n      updateOverlayFigure();\n    }\n  }\n  /**\r\n   * Creates the object that will containt the button callbacks.\r\n   * Returns `null` if `overlay` doesn't exists.\r\n   * Useful for caching.\r\n   *\r\n   * @return {object|null}\r\n   *\r\n   * @see overlay\r\n   *\r\n   * @private\r\n   */\n\n\n  function createButtonsCallbacks() {\n    if (overlay) {\n      var callbacks = {};\n\n      var _arr = Object.keys(overlay.buttons);\n\n      var _loop = function _loop() {\n        var type = _arr[_i];\n\n        callbacks[type] = function (e) {\n          e.stopImmediatePropagation();\n          that[type]();\n        };\n      };\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        _loop();\n      }\n\n      return callbacks;\n    }\n\n    return null;\n  } // Event Listeners\n\n  /**\r\n   * Adds or removes all the event listeners to container.\r\n   * Uses `createButtonsCallbacks()` to create the button callbacks and\r\n   * appends them to `eventCallbacks`.\r\n   *\r\n   * @function\r\n   *\r\n   * @param {boolean} [forceFigures=false] Determines if the update must be forced.\r\n   * Useful when MutationObserver isn't supported.\r\n   *\r\n   * @see createButtonsCallbacks\r\n   * @see eventCallbacks\r\n   *\r\n   * @private\r\n   */\n\n\n  var setListeners = function setListenersFn() {\n    var forceFigures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (openable) {\n      // Click on the gallery\n      container.addEventListener('click', eventCallbacks.containerClick, false);\n\n      if (forceFigures || !mutation) {\n        figures.forEach(function (figure) {\n          figure.addEventListener('click', eventCallbacks.figureClick, false);\n        });\n      } // Keyboard navigation\n\n\n      document.addEventListener('keydown', eventCallbacks.keyboardNavigation); // Swipe navigation - since 1.1.0\n\n      if (swipeHandler) {\n        swipeHandler.attach();\n        /**\r\n         * @listens swipe-event#swipe\r\n         * @see {@link https://github.com/dencreativityspace/swipe-event|swipe-event}\r\n         */\n\n        document.addEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.addEventListener('resize', eventCallbacks.resize); // Binds the overlay buttons to the public methods\n\n      if (overlay) {\n        if (!eventCallbacks.buttons) {\n          eventCallbacks.buttons = createButtonsCallbacks();\n        }\n\n        var _arr2 = Object.keys(overlay.buttons);\n\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n          var type = _arr2[_i2];\n          overlay.buttons[type].addEventListener('click', eventCallbacks.buttons[type], false);\n        }\n      }\n    } else {\n      container.removeEventListener('click', eventCallbacks.containerClick, false);\n      figures.forEach(function (figure) {\n        figure.removeEventListener('click', eventCallbacks.figureClick, false);\n      });\n      document.removeEventListener('keydown', eventCallbacks.keyboardNavigation);\n\n      if (swipeHandler) {\n        swipeHandler.detach();\n        document.removeEventListener('swipe', eventCallbacks.swipeNavigation);\n      }\n\n      window.removeEventListener('resize', eventCallbacks.resize);\n\n      if (overlay) {\n        var _arr3 = Object.keys(overlay.buttons);\n\n        for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n          var _type = _arr3[_i3];\n\n          overlay.buttons[_type].removeEventListener('click', eventCallbacks.buttons[_type], false);\n        }\n      }\n    }\n\n    return setListenersFn;\n  }(true);\n  /**\r\n   * Will contain MutationObserver instance if supported.\r\n   *\r\n   * @constant\r\n   * @type {MutationObserver|null}\r\n   *\r\n   * @private\r\n   */\n\n\n  var mutation = function () {\n    if ('MutationObserver' in window) {\n      var m = new MutationObserver(function (mutations, observer) {\n        mutations.forEach(function (mut) {\n          if (mut.type === 'childList') {\n            figures = container.querySelectorAll('figure');\n\n            if (mut.addedNodes && mut.addedNodes.length > 0) {\n              mut.addedNodes.forEach(function (figure) {\n                if (figure.tagName === 'FIGURE') {\n                  figure.addEventListener('click', eventCallbacks.figureClick, false);\n                }\n              });\n            }\n\n            if (mut.removedNodes && current in mut.removedNodes.values()) {\n              current = figures[0] || null;\n            }\n          }\n        });\n      });\n      m.observe(container, {\n        childList: true\n      });\n      return m;\n    }\n\n    return null;\n  }(); // Public methods\n\n  /**\r\n   * Opens the overlay to show the `<figure>` with the given index or the current one.\r\n   *\r\n   * @param   {?number}   [index=0]   Index of the element to be shown.\r\n   *                                  If is null gets the current figure.\r\n   *\r\n   * @emits FigureGallery#opened\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to `true`\r\n   * and the given index is out of bound.\r\n  */\n\n\n  this.open = function () {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (index == null) {\n      index = getFigureIndex(current);\n    } else {\n      index = parseInt(index);\n\n      if (throwsOpenIndexError) {\n        if (index > figures.length - 1 || Math.abs(index) > figures.length - 1) {\n          throw new Error(\"L'oggetto \".concat(index, \" non \\xE8 disponibile.\"));\n        }\n      } else {\n        index = keepInBound(index);\n      }\n    }\n\n    if (!that.isOpen() || figures[index] !== current) {\n      if (figures.length > 0 || index <= figures.length || current == null) {\n        setCurrentFigure(figures[0]);\n      }\n\n      if (current != null) {\n        updateOverlayFigure();\n      }\n    }\n\n    var openedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      openedEvent = document.createEvent('opened');\n      openedEvent.initCustomEvent('opened', false, false, {\n        current: current\n      });\n    } else {\n      openedEvent = new CustomEvent('opened', {\n        detail: {\n          current: current\n        }\n      });\n    }\n\n    container.dispatchEvent(openedEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the previous `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#prev\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.prev = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(-1, cycleState);\n    var prevEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      prevEvent = document.createEvent('prev');\n      prevEvent.initCustomEvent('prev', false, false, {\n        current: current,\n        next: oldCurrent\n      });\n    } else {\n      prevEvent = new CustomEvent('prev', {\n        detail: {\n          current: current,\n          next: oldCurrent\n        }\n      });\n    }\n\n    container.dispatchEvent(prevEvent);\n    return _this;\n  };\n  /**\r\n   * Shows the next `<figure>`. If the ovelay is closed, opens it.\r\n   *\r\n   * @param   {boolean}   [cycleState]   Determines if the counter must cycle.\r\n   *\r\n   * @emits FigureGallery#next\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.next = function () {\n    var cycleState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cycle;\n    var oldCurrent = current;\n    navigateOverlayFigure(1, cycleState);\n    var nextEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      nextEvent = document.createEvent('next');\n      nextEvent.initCustomEvent('next', false, false, {\n        current: current,\n        prev: oldCurrent\n      });\n    } else {\n      nextEvent = new CustomEvent('next', {\n        detail: {\n          current: current,\n          prev: oldCurrent\n        }\n      });\n    }\n\n    container.dispatchEvent(nextEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the current `<figure>`.\r\n   *\r\n   * @param   {number|HTMLElement}   figure   Index of the element or the\r\n   *                                          element itself to bet setted as\r\n   *                                          current.\r\n   *\r\n   * @emits FigureGallery#setted\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null.\r\n   * @throws Will throw an error if the argument isn't a child of the container.\r\n   * @throws Will throw an error if `throwsOpenIndexError` is set to true and if the user tries to go beyond the end-points.\r\n   * @throws Will throw an error if the argument isn't a valid element.\r\n  */\n\n\n  this.set = function (figure) {\n    if (!figure) {\n      throw new Error(\"L'elemento indicato non \\xE8 un valore valido. Inserire un numero intero o un elemento DOM.\");\n    }\n\n    if (typeof figure === 'number') {\n      if (throwsOpenIndexError) {\n        if (figure > figures.length - 1 || Math.abs(figure) > figures.length - 1) {\n          throw new Error(\"L'oggetto \".concat(figure, \" non \\xE8 disponibile.\"));\n        }\n      } else {\n        figure = keepInBound(figure);\n      }\n\n      figure = figures[figure];\n    } else if (figure instanceof HTMLElement) {\n      if (getFigureIndex(figure) < 0) {\n        throw new Error(\"L'elemento indicato non fa parte di questa galleria.\");\n      }\n    } else {\n      throw new Error(\"L'elemento indicato non \\xE8 un valore valido. Inserire un numero intero o un elemento DOM.\");\n    }\n\n    var oldCurrent = current;\n    setCurrentFigure(figure);\n    updateOverlayFigure();\n    var settedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      settedEvent = document.createEvent('setted');\n      settedEvent.initCustomEvent('setted', false, false, {\n        current: current,\n        old: oldCurrent\n      });\n    } else {\n      settedEvent = new CustomEvent('setted', {\n        detail: {\n          current: current,\n          old: oldCurrent\n        }\n      });\n    }\n\n    container.dispatchEvent(settedEvent);\n    return _this;\n  };\n  /**\r\n   * Closes the overlay.\r\n   *\r\n   * @emits FigureGallery#closed\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.close = function () {\n    if (overlay) {\n      if ('HTMLDialogElement' in window && overlay instanceof HTMLDialogElement) {\n        if (overlay.open) {\n          overlay.close();\n        }\n      } else {\n        overlay.classList.remove(openClass);\n      }\n    }\n\n    var closedEvent = null;\n\n    if (typeof window.CustomEvent !== 'function') {\n      closedEvent = document.createEvent('closed');\n      closedEvent.initCustomEvent('closed', false, false, {\n        current: current\n      });\n    } else {\n      closedEvent = new CustomEvent('closed', {\n        detail: {\n          current: current\n        }\n      });\n    }\n\n    container.dispatchEvent(closedEvent);\n    return _this;\n  };\n  /**\r\n   * Sets the gallery to be openable or not.\r\n   *\r\n   * @param   {boolean}   val\r\n   *\r\n   * @emits FigureGallery#openablechange\r\n   *\r\n   * @return  {this}\r\n   *\r\n   * @throws Will throw an error if the argument is null or isn't a boolean.\r\n  */\n\n\n  this.setOpenable = function (val) {\n    if (val == null || typeof val !== 'boolean') {\n      throw new Error('Il valore deve essere di tipo booleano.');\n    }\n\n    if (val !== openable) {\n      openable = val;\n\n      if (val) {\n        overlay = createOverlay();\n\n        if (mutation) {\n          mutation.observe(container, {\n            childList: true\n          });\n        }\n      } else {\n        overlay = null;\n\n        if (mutation) {\n          mutation.disconnect();\n        }\n\n        if (overlay) {\n          container.removeChild(overlay);\n        }\n      }\n\n      setListeners();\n      var openablechangeEvent = null;\n\n      if (typeof window.CustomEvent !== 'function') {\n        openablechangeEvent = document.createEvent('openablechange');\n        openablechangeEvent.initCustomEvent('openablechange', false, false, {\n          openable: val\n        });\n      } else {\n        openablechangeEvent = new CustomEvent('openablechange', {\n          detail: {\n            openable: val\n          }\n        });\n      }\n\n      container.dispatchEvent(openablechangeEvent);\n    }\n\n    return _this;\n  };\n  /**\r\n   * Forces the update of the child list.\r\n   * Useful when browser doesn't support MutationObserver.\r\n   *\r\n   * @param   {boolean}   [events=true]   Determines if the events should be\r\n   *                                      updated too.\r\n   *\r\n   * @return  {this}\r\n  */\n\n\n  this.updateFigures = function () {\n    var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    figures = contaier.querySelctorAll('figure');\n\n    if (!!events) {\n      figures.forEach(function (figure) {\n        figure.addEventListener('click', eventCallbacks.figureClick, false);\n      });\n    }\n\n    if (!(current in figures)) {\n      current = figures[0] || null;\n    }\n\n    return _this;\n  };\n  /**\r\n   * Tells if the the overlay is open or not.\r\n   *\r\n   * @return  {boolean}\r\n  */\n\n\n  this.isOpen = function () {\n    return container.classList.contains(openClass);\n  };\n  /**\r\n   * Tells if the the overlay is able to be open or not.\r\n   *\r\n   * @return  {boolean}\r\n  */\n\n\n  this.isOpenable = function () {\n    return openable;\n  };\n  /**\r\n   * Returns the container element.\r\n   *\r\n   * @return  {HTMLElement}\r\n  */\n\n\n  this.getContainer = function () {\n    return container;\n  };\n  /**\r\n   * Returns the current figure element.\r\n   *\r\n   * @return  {HTMLElement}\r\n  */\n\n\n  this.getCurrentFigure = function () {\n    return current;\n  };\n  /**\r\n   * Returns the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement}\r\n   */\n\n\n  this.getActiveFigure = function () {\n    return overlay.content;\n  };\n  /**\r\n   * Returns the content of the current figure element in the overlay.\r\n   *\r\n   * @return  {HTMLElement}\r\n   */\n\n\n  this.getActiveContent = function () {\n    return overlay.getContent();\n  };\n  /**\r\n   * Returns the swipe handler instance, if exists.\r\n   *\r\n   * @return  {SwipeEvent|null}\r\n   */\n\n\n  this.getSwipeHandler = function () {\n    return swipeHandler;\n  };\n}"]}